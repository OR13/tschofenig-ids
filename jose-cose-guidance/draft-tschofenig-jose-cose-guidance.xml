<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-jose-cose-guidance-00" category="bcp" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE/JOSE Guidance">Guidance for COSE and JOSE Protocol Designers and Implementers</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="L." surname="Hazlewood" fullname="Les Hazlewood">
      <organization></organization>
      <address>
        <email>lhazlewood@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="October" day="22"/>

    <area>Security</area>
    <workgroup>JOSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 46?>

<t>JSON Object Signing and Encryption (JOSE) and  CBOR Object Signing
and Encryption (COSE) are two widely used security wrappers, which
have been developed in the IETF and have intentionally been kept
in sync.</t>

<t>This document provides guidance for protocol designers developing
extensions for JOSE/COSE and for implementers of JOSE/COSE libraries.
Developers of application using JSON and/or JOSE should also read
this document but are realistically more focused on the documentation
offered by the library they are using.</t>



    </abstract>



  </front>

  <middle>


<?line 59?>

<section anchor="introduction"><name>Introduction</name>

<t>JSON Object Signing and Encryption (JOSE) has initially been designed
to offer provide a security wrapper for access tokens used by the
OAuth protocol, particularly a digital signature. The wider
applicability of a standard for describing security-related
meta-data was, however, immediately recognized. Today, JOSE is
in widespread use and the functionality is spread accross various
specifications (such as <xref target="RFC7515"/> for the JSON Web Signature and
<xref target="RFC7516"/> for JSON Web Encryption).</t>

<t>With the development of CBOR <xref target="RFC8949"/> a binary encoding format was developed
to address use cases where JSON was too verbose. A security wrapper
that uses CBOR-based encoding was needed and CBOR Object Signing
and Encryption (COSE) was standardized and later updated with
<xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>The JOSE and COSE specifications have intentionally been kept in
sync since protocols and payloads today are often described in
the Concise Data Definition Language (CDDL) and serialized to
either JOSE or COSE thereby making them attractive to developers
from the web and the embedded world at the same time. Due to the
similarity of the designs, the guidance provided in this document
is therefore applicable to JOSE and COSE.</t>

<t>Unfortunately, some practices cause challenges from a security
point of view and this document captures those. We hope that this
document helps to design better extensions for JOSE/COSE and to
make the life of developers easier.</t>

<t>The document is structured as follows. <xref target="kid"/> describes the
challenges with key identification. Future versions of this
document will add further challenges. <xref target="guidance"/> then offers
guidance for how to create better designs for JOSE/COSE.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

</section>
<section anchor="kid"><name>Key Identification</name>

<t>The security wrappers in JOSE and COSE use a simple design, at least
for the basic functionality like digital signatures and MACs using a
single recipient.</t>

<t>The security wrapper contains the following structure:</t>

<t><list style="symbols">
  <t>A header, which is split into a protected and unprotected parameters.</t>
  <t>The payload, which may be detached and will then be conveyed
 independently. This is the payload we want to protect. In many applications this
 payload is a JSON-based payload (in case of JOSE) or a CBOR-encoded payload
 (in case of COSE). There are also standardize payloads, such as JSON Web Token
 (JWT) <xref target="RFC7519"/> and CBOR Web Token (CWT) <xref target="RFC8392"/>.</t>
  <t>A digital signature, a tag (for a MAC), or a ciphertext (for encryption).</t>
</list></t>

<t>The purpose of the header is to provide instructions for the protection of
the payload, including</t>

<t><list style="symbols">
  <t>algorithm information used to provide protection of the payload,</t>
  <t>the identification of the key to verify the digital signature, MAC, or
encryption,</t>
  <t>X.509 certificates and certificate chains,</t>
  <t>countersignature.</t>
</list></t>

<t>Although the layering is quite simple with the header providing the information
to provide protection of the payload, some specifications and applications
started to place information for key identification inside the payload. This
approach destroys the clear layering.</t>

<t>The use of the 'kid' parameter is the preferred way to identify a key but
nothing in <xref target="RFC7515"/> states that the key identification values must be
globally unique (and therefore "collision resistant"). If a JOSE-/COSE-protected
message is intended for external/3rd party recipients, then</t>

<t><list style="symbols">
  <t>the 'kid' parameter MUST contain a globally unique value, or</t>
  <t>other header parameters when combined associated with the 'kid' result in a
globally unique value.</t>
</list></t>

<t>If a JOSE-/COSE-protected message is used in a domain-specific context only,
such as within an enterprise or a workload environment, then the uniqueness
requirements are lifted.</t>

<t>The practice of placing some or all key identification into the payload, instead
of the JOSE/COSE header, forces a parser to defer security processing of the
payload to a later point in time, to look inside the payload to find the
appropriate keying material and to subsequently verify the payload. Since the
parser implementation does not know what fields will be used for key identification
it has to expose all information to an application prior to signature verification
or MAC processing. There is a large risk that application developers make security-
relevant decisions already prior to the completion of the security processing.</t>

<t>There is no need for such design since there are existing header parameters
available to store the necessary information. If those headers are insufficient,
then it is always possible to define new header parameter to convey this information.
This approach also simplifies libraries since they do not need to understand
the payload content to fetch the correct information.</t>

<t>When key identification-related claims are placed in the payload, those
claims SHOULD be repeated in the header, as defined in <xref target="I-D.ietf-cose-cwt-claims-in-headers"/> (for COSE)
and in <xref section="5.3" sectionFormat="of" target="RFC7519"/> (for JOSE). This approach should only be
used as a last resort, when the previous two approaches cannot be used.</t>

<t>Finally, an easy transition from a system using digital signatures over
payloads to encrypted payloads is not possible since information needed
for key look-up are found in the encrypted payload. A re-design would
therefore be required.</t>

</section>
<section anchor="guidance"><name>Guidance</name>

<t>We RECOMMEND that protocol designers and implementers use the
available header parameter for key identification. If the standardized
parameters are insufficient, new header parameters can be defined.
Re-using existing header parameters will improve interoperability
because there are a limited number of cases on how to select a key.</t>

<t>Information that is needed for determining the keying material needed
to cryptographically verify the protected payload MUST be placed
into the header of the JOSE/COSE security wrapper.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document does not make requests to IANA.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This specification makes security recommendations for the
JOSE/COSE specification suite. Therefore, it is entirely
about security.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC7516">
  <front>
    <title>JSON Web Encryption (JWE)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Hildebrand" initials="J." surname="Hildebrand"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Encryption (JWE) represents encrypted content using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries defined by that specification. Related digital signature and Message Authentication Code (MAC) capabilities are described in the separate JSON Web Signature (JWS) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7516"/>
  <seriesInfo name="DOI" value="10.17487/RFC7516"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC8949">
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="94"/>
  <seriesInfo name="RFC" value="8949"/>
  <seriesInfo name="DOI" value="10.17487/RFC8949"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC7519">
  <front>
    <title>JSON Web Token (JWT)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7519"/>
  <seriesInfo name="DOI" value="10.17487/RFC7519"/>
</reference>

<reference anchor="RFC8392">
  <front>
    <title>CBOR Web Token (CWT)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
    <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8392"/>
  <seriesInfo name="DOI" value="10.17487/RFC8392"/>
</reference>


<reference anchor="I-D.ietf-cose-cwt-claims-in-headers">
   <front>
      <title>CBOR Web Token (CWT) Claims in COSE Headers</title>
      <author fullname="Tobias Looker" initials="T." surname="Looker">
         <organization>Mattr</organization>
      </author>
      <author fullname="Michael B. Jones" initials="M. B." surname="Jones">
         <organization>independent</organization>
      </author>
      <date day="8" month="July" year="2023"/>
      <abstract>
	 <t>   This document describes how to include CBOR Web Token (CWT) claims in
   the header parameters of any COSE structure.  This functionality
   helps to facilitate applications that wish to make use of CBOR Web
   Token (CWT) claims in encrypted COSE structures and/or COSE
   structures featuring detached signatures, while having some of those
   claims be available before decryption and/or without inspecting the
   detached payload.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cwt-claims-in-headers-06"/>
   
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">




<reference anchor="I-D.tschofenig-rats-psa-token">
   <front>
      <title>Arm&#x27;s Platform Security Architecture (PSA) Attestation Token</title>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Simon Frost" initials="S." surname="Frost">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Mathias Brossard" initials="M." surname="Brossard">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Adrian L. Shaw" initials="A. L." surname="Shaw">
         <organization>HP Labs</organization>
      </author>
      <author fullname="Thomas Fossati" initials="T." surname="Fossati">
         <organization>Linaro</organization>
      </author>
      <date day="1" month="September" year="2023"/>
      <abstract>
	 <t>   The Platform Security Architecture (PSA) is a family of hardware and
   firmware security specifications, as well as open-source reference
   implementations, to help device makers and chip manufacturers build
   best-practice security into products.  Devices that are PSA compliant
   are able to produce attestation tokens as described in this memo,
   which are the basis for a number of different protocols, including
   secure provisioning and network access control.  This document
   specifies the PSA attestation token structure and semantics.

   The PSA attestation token is a profiled Entity Attestation Token
   (EAT).

   This specification describes what claims are used in an attestation
   token generated by PSA compliant systems, how these claims get
   serialized to the wire, and how they are cryptographically protected.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-tschofenig-rats-psa-token-13"/>
   
</reference>




    </references>


<?line 196?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>TBD: Add your name here.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA5VZXXPbNhZ914z+A5o+1O6aiptsurWf1o2TrbtO3I2dye7T
DkRCEmqSUAHQiprJf99zLkCKsp3uNDNJKBK8uB/nnnsvWBTFdBJtrM2p+kdn
K92WRi2cVy+vrl8p3VbqZ1784l10pavVuQl22Rof5NlFs65NY9qIG9PJdKLn
c2/uTuXlp/JiL3M6qVzZ6gbbVF4vYhFDuXIL09pl8asLpij5zzKvLo6Pp5NS
R7N0fnuq5uWa0u3an6rouxCfHR+fHD/Dft7oU3Vtys7buJ1ONs7fLr3r1qei
9nRya7a4V52qC+rYmlicc3dKCxEW/FfXroVOWwP91/Z0OlHKL0pThbit+/tK
wfbxtW0r2DzcCc5HbxZhd2Pb7P+O3pa79aVr6LPdc9vWth3tZj7GorYhFhA0
dzUWFu7bv/ARnNjo9dq2y7xad3HlPPUu+Jx/bIsXfpqpm8HD/ZPk/59025rw
yGPTaFufqpU8n+0C9Pdl83EG3/XrnF+e0oP3trycQfTvtdk4V+3veIntHjzK
u6l61T/BPrg1g3vu79Q63+ho74wE6N3rl8++++6kv/7bi+9ejK6/769Pjl88
w7VtF3tvXxTnI9sKr2Mo1kEX0d2aVnYrikLpOYKmS0HKz9dXb9XV/FdTRnUN
9MP7gv5Xbem362hdqw4It0O5q17+ePXu3nLE6d76l2m9NypunNrYytRb1QVT
qZDRrDYekUZiHanNypar6WSl74yaG9OqytyZ2q2x2rYqroy6eHXzWnaXNRZg
b7mPriFV3rg160hfAJttOaNVNysbiKeOWFRr7+6gRFDLMQms+7SvhrTPW4tR
wKlpA/YJspo+eDrwBu/YET8otxitqO3ca2+Bs+nkPFuT1sDo2iL36aYu0Nfi
f4h8mvdQYeW6ulK6Dk6BAQCpuGfMvIviWjxjGkEa/dA4T6tK8bJLfutfke2m
E7dYGI+n8608TUrK9VYEij6zHiONrara8NfXigTjXdWVSdCfAc1KB0TMRruL
VnY3DXNKlOoDpPQDgIindVmaEJSAOCQgJSOmk6szcMQQyiO11h4u6WrtsZ1W
lV3aqGvFHXXsvAFzwHZC0gO3KRpzW3NHhkcJcWqfIgxNS2/ntK7Xq/CmBnVD
+cZEXVQ6arXRgPHKbRBpfwRYNKayWAMFvCkdvPO7qbCvq/T2KMXYBoEr1Qhr
BplGiQcZmUXXlgngVAuxz2vgBu/ghztgy3UQEdamtIuMp6AOQleuFBz+6VNm
js+fxQ4KlZB9MHOJl7iC+00n/drv89ph3S6WhwKKDxaOFlglRAsY4TNhhE+f
voKYH07+egIxWsFlhJZpS1fRe4mk6Khddkv4dVV5hpbmlzogRTcrgDRpweXR
OQW3zlFAZ+rsATyYHBDc8U0qUsw10TFsTBGtMRXu0bt/gr34Zg8GBlDeZ+i9
6tYVIYDwxRUd+FXmY5qORcON558/ZzIyKeyiguT4fuD+iNdwH4EGrwHDZK4e
6qlHWett7XRFPwFdksZuEVOSEbpConSSUS9dW1q4+ZyQPTcLyUrYe6nbZaeX
Boafn18mmg/GI2HF7OhAhTDUZHrquyfeMcjCRt/S0fjZKB2lrKAY4bUh0uye
Ft41Ap4NkNXj3DTQj6FBF0PGi3I3oKqqaBvE+7wTQZLowTYWWZ0TNeGQWY3U
44+B2TOV5OIxIk5kXEhaL8iVfe7XssVeeCRo71lZY9dKIh+hDWoom9aBi4BV
QewKsTLtEjfEwB19od9yNuXHnTWbbPKYxku9ZhJSJcH2BwMKWUOZlfiBDDGs
XZl6HZJLaTLAEYnDP6xQjBtiYzLXLwiMUUiU0cEaP+Bz2It0gza0pHIVyWTh
6tptwgy4vrUVMN5DK6TAjJzAhABowVlsIQeAz9TrTggHiZzUlQjumbixdU02
APl5AdtOLHfuw4vt8bRNZQPv7xV0UDCdVIIso+mdlFGy76FZqms3xje2dbVb
bsVn78xvnfVS08OQF72HaBfb7aCevHl/ffPkKP2v3l7J9btX/3p/8e7VOa+v
fzq7vBwu0orpBL+u3l/mBbzavfry6s2bV2/P09tvzv6D/6jPk6tfbi6u3p5d
PunRPPKYtFcOZgpzeJSImAI2Tn22ior9ZKoJvMqkhKr+T1h0sRcp9elrxrg3
+UG3Ron7TCZ1C9TEXij7+oiZXANfSLm++oCWbXmvsNUW6HxQoBOvvTl7GXKD
pJn77bJmx1PatYW+sy8piOkD7Q4a9lRHBblSvXtE59YelWSFispyLe1nKrLQ
ir5EVRKWRZHItN+1u99oMEBQ7PlmWRYVyTzci2s0GRz+iLpcZSGCcAEvnkDP
O7NlEVSct9ZGhq56y/YEuiSm6qWCNFGOEHKolhWZoSXDLu123FGGDJHhPYjR
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

-->

</rfc>

