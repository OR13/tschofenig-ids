<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-tls-post-handshake-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Post Handshake Mutual Authentication for TLS">Post Handshake Client and Server Authentication for Transport Layer Security (TLS) 1.3</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="M." surname="Tuexen" fullname="Michael Tuexen">
      <organization>Muenster Univ. of Applied Sciences</organization>
      <address>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>

    <date year="2023" month="November" day="26"/>

    <area>Security</area>
    <workgroup>TLS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 44?>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
extension to indicate support for post handshake client authentication. If a
client supports this extension, a server may request client authentication
at any time after the handshake has completed by sending a CertificateRequest
message.</t>

<t>The extension described in this document allows the client and the server to
request post handshake authentication. It thereby generalizes the post handshake
client authentication. The benefit of using this extension is that there is no
need to drop and re-establish a handshake. This feature can be used with
long-lived TLS connections where regular proof of possession of the long-term
secrets is required.</t>



    </abstract>



  </front>

  <middle>


<?line 59?>

<section anchor="introduction"><name>Introduction</name>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
extension to indicate support for post handshake client authentication. If a
client supports this extension, a server may request client authentication
at any time after the handshake has completed by sending a CertificateRequest
message.</t>

<t>The extension described in this document allows the client and the server to
request post handshake authentication. It thereby generalizes the post handshake
client authentication. The benefit of using this extension is that there is no
need to drop and re-establish a handshake. This feature can be used with
long-lived TLS connections where regular proof of possession of the long-term
secrets is required.</t>

<t>Functionality-wise this specification re-introduces features already present
in previous versions of TLS when re-negotiation was used.</t>

<t>This specification is applicable to both TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> and
DTLS 1.3 <xref target="RFC9147"/>. Throughout the specification we do not distinguish between
these two protocols unless necessary for better understanding.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

</section>
<section anchor="extensions"><name>Extensions</name>

<t>Client and servers use the TLS flags extension <xref target="I-D.ietf-tls-tlsflags"/>
to indicate support for the functionality defined in this document. We
call this the "post_handshake_auth_mutual" extension and the corresponding
flag is called "Post_Handshake_Auth_Mutual" flag.</t>

<t>The "Post_Handshake_Auth_Mutual" flag proposed by the client in the ClientHello
(CH) MUST be acknowledged in the EncryptedExtensions (EE), if the
server also supports the functionality defined in this document and
is configured to use it.</t>

<t>If the "Post_Handshake_Auth_Mutual" flag is not set, servers ignore the
functionality specified in this document and may, if supported, rely only
on the post handshake client authentication extension instead.</t>

<t>Clients may attempt to negotiate post handshake client authentication
and post handshake mutual authentication to offer servers the option
for a fall-back to post handshake client authentication only.</t>

<t>The functionality in this specification MUST only be used when mutual
authentication is performed during the initial handshake.</t>

</section>
<section anchor="post-handshake-mutual-authentication"><name>Post-Handshake Mutual Authentication</name>

<t>Assuming support for the extension has been negotiated successfully,
a server MAY request client authentication at any time after the
handshake has completed by sending a CertificateRequest message. 
The client MUST respond with the appropriate Authentication messages.
If the client chooses to authenticate, it MUST send Certificate,
CertificateVerify, and Finished.  If it declines, it MUST send a
Certificate message containing no certificates followed by Finished.
All of the client's messages for a given response MUST appear
consecutively on the wire with no intervening messages of other types.</t>

<t>A client MAY request server authentication at any time after the
handshake has completed by sending a CertificateRequest message.
The server MUST respond with the appropriate Authentication messages.
If the server chooses to authenticate, it MUST send Certificate,
CertificateVerify, and Finished.  If it declines, it MUST send a
Certificate message containing no certificates followed by Finished.
All of the servers's messages for a given response MUST appear
consecutively on the wire with no intervening messages of other types.</t>

<t>A client or a server that receives a CertificateRequest message
without having sent the "post_handshake_auth_mutual" extension MUST
send an "unexpected_message" fatal alert.</t>

<t>Note: Because client authentication could involve prompting the user,
servers MUST be prepared for some delay, including receiving an
arbitrary number of other messages between sending the
CertificateRequest and receiving a response.  In addition, clients
which receive multiple CertificateRequests in close succession MAY
respond to them in a different order than they were received (the
certificate_request_context value allows the server to disambiguate
the responses).</t>

</section>
<section anchor="example"><name>Example</name>

<t><xref target="fig-post-handshake"/> shows an example where the client and
the server are mutually authenticated during the initial handshake.</t>

<t>The server then asks for the client to re-authenticate by issuing
a CertificateRequest message. Some point later the client
challenges the server to re-authenticate.</t>

<t>During post handshake authentication the client and the server
need to demonstrate possession of their private keys again.</t>

<figure title="Post Handshake Authentication Exchange." anchor="fig-post-handshake"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share
     | + signature_algorithms
     v + post_handshake_auth_mutual   -------->
                                                  ServerHello  ^ Key
                                                  + key_share  | Exch
                                                               v
                                        {EncryptedExtensions   ^ Server
                                + post_handshake_auth_mutual}  | Params
                                         {CertificateRequest}  v
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v
                               <--------
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]


         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/


                               <--------[CertificateRequest]
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->


         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/


       [CertificateRequest]    -------->
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v

       [Application Data]      <------->  [Application Data]
]]></artwork></figure>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>The extension described in this specification covers a use case where
the TLS communication is long lived and interruption of this
established communication security channel is not desireable. Examples
of such use cases include industrial IoT environments and telecommunication
infrastructure. In many cases, IPsec has been used in the past
in those environments and is replaced by TLS or DTLS.</t>

<t>This document does not introduce renegotiation since security algorithms,
and keys are not re-negotiated. Instead, the security algorithms
and keys established by the initial handshake are re-used throughout the
lifetime of the communication interaction.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is requested to add the following value to the
"TLS Flags" extension defined in <xref target="I-D.ietf-tls-tlsflags"/></t>

<t><list style="symbols">
  <t>Value: TBD</t>
  <t>Flag Name: post_handshake_auth_mutual</t>
  <t>Messages: CH, EE</t>
  <t>Recommended: Y</t>
  <t>Reference: [This document]</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>


<reference anchor="I-D.ietf-tls-rfc8446bis">
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
         <organization>Windy Hill Systems, LLC</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This document specifies version 1.3 of the Transport Layer Security
   (TLS) protocol.  TLS allows client/server applications to communicate
   over the Internet in a way that is designed to prevent eavesdropping,
   tampering, and message forgery.

   This document updates RFCs 5705, 6066, 7627, and 8422 and obsoletes
   RFCs 5077, 5246, 6961, and 8446.  This document also specifies new
   requirements for TLS 1.2 implementations.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-rfc8446bis-09"/>
   
</reference>


<reference anchor="I-D.ietf-tls-tlsflags">
   <front>
      <title>A Flags Extension for TLS 1.3</title>
      <author fullname="Yoav Nir" initials="Y." surname="Nir">
         <organization>Dell Technologies</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   A number of extensions are proposed in the TLS working group that
   carry no interesting information except the 1-bit indication that a
   certain optional feature is supported.  Such extensions take 4 octets
   each.  This document defines a flags extension that can provide such
   indications at an average marginal cost of 1 bit each.  More
   precisely, it provides as many flag extensions as needed at 4 + the
   order of the last set bit divided by 8.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-tlsflags-12"/>
   
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>




    </references>



<?line 235?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the members of the "TSVWG DTLS for SCTP
Requirements Design Team" for their discussion. The members, in
no particular order, are:</t>

<t><list style="symbols">
  <t>Marcelo Ricardo Leitner</t>
  <t>Zaheduzzaman Sarker</t>
  <t>Magnus Westerlund</t>
  <t>John Mattsson</t>
  <t>Claudio Porfiri</t>
  <t>Xin Long</t>
  <t>Michael Tuxen</t>
  <t>Hannes Tschofenig</t>
  <t>K Tirumaleswar Reddy</t>
  <t>Bertrand Rault</t>
</list></t>

<t>Additionally, we would like to thank the chairs of the
Transport and Services Working Group (tsvwg) Gorry Fairhurst and
Marten Seemann as well as the responsible area director Martin Duke.</t>

</section>


  </back>

<!-- ##markdown-source:
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
FzSfv0CEJgAA

-->

</rfc>

