



TLS                                                        H. Tschofenig
Internet-Draft                                                          
Intended status: Standards Track                               M. Tuexen
Expires: 29 May 2024                  Muenster Univ. of Applied Sciences
                                                        26 November 2023


  Post Handshake Client and Server Authentication for Transport Layer
                           Security (TLS) 1.3
                 draft-tschofenig-tls-post-handshake-00

Abstract

   The Transport Layer Security (TLS) 1.3 specification offers a
   dedicated extension to indicate support for post handshake client
   authentication.  If a client supports this extension, a server may
   request client authentication at any time after the handshake has
   completed by sending a CertificateRequest message.

   The extension described in this document allows the client and the
   server to request post handshake authentication.  It thereby
   generalizes the post handshake client authentication.  The benefit of
   using this extension is that there is no need to drop and re-
   establish a handshake.  This feature can be used with long-lived TLS
   connections where regular proof of possession of the long-term
   secrets is required.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.



Tschofenig & Tuexen        Expires 29 May 2024                  [Page 1]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology and Requirements Language . . . . . . . . . . . .   3
   3.  Extensions  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Post-Handshake Mutual Authentication  . . . . . . . . . . . .   3
   5.  Example . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   6
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .   6
   Appendix A.  Acknowledgments  . . . . . . . . . . . . . . . . . .   7
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7

1.  Introduction

   The Transport Layer Security (TLS) 1.3 specification offers a
   dedicated extension to indicate support for post handshake client
   authentication.  If a client supports this extension, a server may
   request client authentication at any time after the handshake has
   completed by sending a CertificateRequest message.

   The extension described in this document allows the client and the
   server to request post handshake authentication.  It thereby
   generalizes the post handshake client authentication.  The benefit of
   using this extension is that there is no need to drop and re-
   establish a handshake.  This feature can be used with long-lived TLS
   connections where regular proof of possession of the long-term
   secrets is required.

   Functionality-wise this specification re-introduces features already
   present in previous versions of TLS when re-negotiation was used.

   This specification is applicable to both TLS 1.3
   [I-D.ietf-tls-rfc8446bis] and DTLS 1.3 [RFC9147].  Throughout the
   specification we do not distinguish between these two protocols
   unless necessary for better understanding.






Tschofenig & Tuexen        Expires 29 May 2024                  [Page 2]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


2.  Terminology and Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

3.  Extensions

   Client and servers use the TLS flags extension
   [I-D.ietf-tls-tlsflags] to indicate support for the functionality
   defined in this document.  We call this the
   "post_handshake_auth_mutual" extension and the corresponding flag is
   called "Post_Handshake_Auth_Mutual" flag.

   The "Post_Handshake_Auth_Mutual" flag proposed by the client in the
   ClientHello (CH) MUST be acknowledged in the EncryptedExtensions
   (EE), if the server also supports the functionality defined in this
   document and is configured to use it.

   If the "Post_Handshake_Auth_Mutual" flag is not set, servers ignore
   the functionality specified in this document and may, if supported,
   rely only on the post handshake client authentication extension
   instead.

   Clients may attempt to negotiate post handshake client authentication
   and post handshake mutual authentication to offer servers the option
   for a fall-back to post handshake client authentication only.

   The functionality in this specification MUST only be used when mutual
   authentication is performed during the initial handshake.

4.  Post-Handshake Mutual Authentication

   Assuming support for the extension has been negotiated successfully,
   a server MAY request client authentication at any time after the
   handshake has completed by sending a CertificateRequest message.  The
   client MUST respond with the appropriate Authentication messages.  If
   the client chooses to authenticate, it MUST send Certificate,
   CertificateVerify, and Finished.  If it declines, it MUST send a
   Certificate message containing no certificates followed by Finished.
   All of the client's messages for a given response MUST appear
   consecutively on the wire with no intervening messages of other
   types.

   A client MAY request server authentication at any time after the
   handshake has completed by sending a CertificateRequest message.  The
   server MUST respond with the appropriate Authentication messages.  If
   the server chooses to authenticate, it MUST send Certificate,



Tschofenig & Tuexen        Expires 29 May 2024                  [Page 3]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


   CertificateVerify, and Finished.  If it declines, it MUST send a
   Certificate message containing no certificates followed by Finished.
   All of the servers's messages for a given response MUST appear
   consecutively on the wire with no intervening messages of other
   types.

   A client or a server that receives a CertificateRequest message
   without having sent the "post_handshake_auth_mutual" extension MUST
   send an "unexpected_message" fatal alert.

   Note: Because client authentication could involve prompting the user,
   servers MUST be prepared for some delay, including receiving an
   arbitrary number of other messages between sending the
   CertificateRequest and receiving a response.  In addition, clients
   which receive multiple CertificateRequests in close succession MAY
   respond to them in a different order than they were received (the
   certificate_request_context value allows the server to disambiguate
   the responses).

5.  Example

   Figure 1 shows an example where the client and the server are
   mutually authenticated during the initial handshake.

   The server then asks for the client to re-authenticate by issuing a
   CertificateRequest message.  Some point later the client challenges
   the server to re-authenticate.

   During post handshake authentication the client and the server need
   to demonstrate possession of their private keys again.





















Tschofenig & Tuexen        Expires 29 May 2024                  [Page 4]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


        Client                                           Server

 Key  ^ ClientHello
 Exch | + key_share
      | + signature_algorithms
      v + post_handshake_auth_mutual   -------->
                                                   ServerHello  ^ Key
                                                   + key_share  | Exch
                                                                v
                                         {EncryptedExtensions   ^ Server
                                 + post_handshake_auth_mutual}  | Params
                                          {CertificateRequest}  v
                                                 {Certificate}  ^
                                           {CertificateVerify}  | Auth
                                                    {Finished}  v
                                <--------
      ^ {Certificate}
 Auth | {CertificateVerify}
      v {Finished}              -------->
        [Application Data]      <------->  [Application Data]


          /-------------------------------------------\
         |              Some time later ...            |
          \-------------------------------------------/


                                <--------[CertificateRequest]
      ^ {Certificate}
 Auth | {CertificateVerify}
      v {Finished}              -------->


          /-------------------------------------------\
         |              Some time later ...            |
          \-------------------------------------------/


        [CertificateRequest]    -------->
                                                 {Certificate}  ^
                                           {CertificateVerify}  | Auth
                                                    {Finished}  v

        [Application Data]      <------->  [Application Data]

           Figure 1: Post Handshake Authentication Exchange.





Tschofenig & Tuexen        Expires 29 May 2024                  [Page 5]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


6.  Security Considerations

   The extension described in this specification covers a use case where
   the TLS communication is long lived and interruption of this
   established communication security channel is not desireable.
   Examples of such use cases include industrial IoT environments and
   telecommunication infrastructure.  In many cases, IPsec has been used
   in the past in those environments and is replaced by TLS or DTLS.

   This document does not introduce renegotiation since security
   algorithms, and keys are not re-negotiated.  Instead, the security
   algorithms and keys established by the initial handshake are re-used
   throughout the lifetime of the communication interaction.

7.  IANA Considerations

   IANA is requested to add the following value to the "TLS Flags"
   extension defined in [I-D.ietf-tls-tlsflags]

   *  Value: TBD

   *  Flag Name: post_handshake_auth_mutual

   *  Messages: CH, EE

   *  Recommended: Y

   *  Reference: [This document]

8.  Normative References

   [I-D.ietf-tls-rfc8446bis]
              Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", Work in Progress, Internet-Draft, draft-
              ietf-tls-rfc8446bis-09, 7 July 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              rfc8446bis-09>.

   [I-D.ietf-tls-tlsflags]
              Nir, Y., "A Flags Extension for TLS 1.3", Work in
              Progress, Internet-Draft, draft-ietf-tls-tlsflags-12, 23
              July 2023, <https://datatracker.ietf.org/doc/html/draft-
              ietf-tls-tlsflags-12>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.



Tschofenig & Tuexen        Expires 29 May 2024                  [Page 6]

Internet-Draft  Post Handshake Mutual Authentication for   November 2023


   [RFC9147]  Rescorla, E., Tschofenig, H., and N. Modadugu, "The
              Datagram Transport Layer Security (DTLS) Protocol Version
              1.3", RFC 9147, DOI 10.17487/RFC9147, April 2022,
              <https://www.rfc-editor.org/rfc/rfc9147>.

Appendix A.  Acknowledgments

   We would like to thank the members of the "TSVWG DTLS for SCTP
   Requirements Design Team" for their discussion.  The members, in no
   particular order, are:

   *  Marcelo Ricardo Leitner

   *  Zaheduzzaman Sarker

   *  Magnus Westerlund

   *  John Mattsson

   *  Claudio Porfiri

   *  Xin Long

   *  Michael Tuxen

   *  Hannes Tschofenig

   *  K Tirumaleswar Reddy

   *  Bertrand Rault

   Additionally, we would like to thank the chairs of the Transport and
   Services Working Group (tsvwg) Gorry Fairhurst and Marten Seemann as
   well as the responsible area director Martin Duke.

Authors' Addresses

   Hannes Tschofenig
   Email: hannes.tschofenig@gmx.net


   Michael Tuexen
   Muenster Univ. of Applied Sciences
   Email: tuexen@fh-muenster.de







Tschofenig & Tuexen        Expires 29 May 2024                  [Page 7]
