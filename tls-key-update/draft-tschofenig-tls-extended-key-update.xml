<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-tls-extended-key-update-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Extended Key Update for TLS">Extended Key Update for Transport Layer Security (TLS) 1.3</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="M." surname="Tüxen" fullname="Michael Tüxen">
      <organization>Münster Univ. of Applied Sciences</organization>
      <address>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>
    <author initials="T." surname="Reddy" fullname="Tirumaleswar Reddy">
      <organization>Nokia</organization>
      <address>
        <email>kondtir@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="December" day="26"/>

    <area>Security</area>
    <workgroup>TLS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 65?>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
message to update cryptographic keys during the lifetime of an ongoing session.
It allows the sender to perform an update of the key and initialization vector
and may trigger the recipient, via the request_update field, to transmit a
key update message in the reverse direction.</t>

<t>In environments where sessions are long-lived, such as industrial IoT or
telecommunication networks, this key update along is insufficient since
perfect forward secrecy is not offered via this mechanism. Earlier versions
of TLS allowed the two peers to perform renegotiation, which is a handshake
that establishes new cryptographic parameters for an existing session.
When a security vulnerability with the renegotiation mechanism was discovered,
RFC 5746 was standardized as a fix. Renegotiation has, however, been removed
from TLS 1.3.</t>

<t>This specification defines an extended key update message that supports
perfect forward secrecy using a Diffie-Hellman key exchange.</t>



    </abstract>



  </front>

  <middle>


<?line 85?>

<section anchor="introduction"><name>Introduction</name>

<t>The features of TLS and DTLS have changed over the years and while newer versions
optimized and enhanced features (often with the help of extensions) some functionality
was removed without replacement. The ability to update keys and initialization vectors
with forward secrecy has been added in TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> using the
KeyUpdate message and it intended to (partially) replace renegotiation from earlier
TLS versions. The renegotiation feature, while complex, offered additional
functionality that is not supported with TLS 1.3 anymore, including the update
keys with a Diffie-Hellman exchange during the lifetime of a session. If a traffic secret (application_traffic_secret_N) has been compromised, an attacker can passively 
eavesdrop on all future data sent on the connection, including data
encrypted with application_traffic_secret_N+1, application_traffic_secret_N+2, etc.</t>

<t>While such a feature is less relevant in environments with shorter-lived sessions,
such as transactions on the web, there are uses of TLS and DTLS where long-lived
sessions are common. In those environments, such as industrial IoT and
telecommunication networks, availability is important and an interruption of the
communication due to periodic session resumptions is not an option. A full handshake 
with (EC)DHE gives protection against active attackers but prevents the use 
of long-lived sessions.</t>

<t>Some deployments have used IPsec in the past and have now decided to switch to TLS
or DTLS instead and the requirement for updates of cryptographic keys for an existing
session has become a requirement. For IPsec, NIST, BSI, and ANSSI recommends very frequent
re-run of Diffie-Hellman to provide forward secrecy and force attackers to perform a
dynamic key extraction <xref target="RFC7624"/>. ANSSI writes "It is recommended to force the periodic
renewal of the keys, e.g., every hour and every 100 GB of data, in order to limit the
impact of a key compromise." <xref target="ANSSI-DAT-NT-003"/>.</t>

<t>This specification defines a new, extended key update message supporting perfect
forward secrecy. It does so by utilizing a Diffie-Hellman exchange using one of the
groups negotiated during the initial exchange. The support for this extension is
signaled using the TLS flags extension mechanism. The frequent re-running of extended
key update forces an attacker to do dynamic key exfiltration.</t>

<t>This specification is applicable to both TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> and
DTLS 1.3 <xref target="RFC9147"/>. Throughout the specification we do not distinguish between
these two protocols unless necessary for better understanding.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>To distinguish the key update procedure defined in <xref target="I-D.ietf-tls-rfc8446bis"/>
from the key update procedure specified in this document, we use the terms
"classic key update" and "extended key update", respectively.</t>

</section>
<section anchor="extensions"><name>Extensions</name>

<t>Client and servers use the TLS flags extension <xref target="I-D.ietf-tls-tlsflags"/>
to indicate support for the functionality defined in this document. We
call this the "extended_key_update" extension and the corresponding
flag is called "Extended_Key_Update" flag.</t>

<t>The "Extended_Key_Update" flag proposed by the client in the ClientHello
(CH) MUST be acknowledged in the EncryptedExtensions (EE), if the
server also supports the functionality defined in this document and
is configured to use it.</t>

<t>If the "Extended_Key_Update" flag is not set, servers
ignore any the functionality specified in this document and applications
that require perfect forward security will have to initiate a full handshake.</t>

</section>
<section anchor="extended-key-update"><name>Extended Key Update</name>

<section anchor="generic-considerations"><name>Generic Considerations</name>

<t>The ExtendedKeyUpdate handshake message is used to indicate an update
of cryptographic keys. This key update process can be sent by either
peer after it has sent a Finished message.  Implementations that
receive a ExtendedKeyUpdate message prior to receiving a Finished
message MUST terminate the connection with an "unexpected_message"
alert.</t>

<t>The design of the ExtendedKeyUpdate message follows the design of
the classic KeyUpdate message. Both allow the update of keys in
one direction only. However, the ExtendedKeyUpdate message requires
a full-roundtrip due to the nature of the Diffie-Hellman exchange.</t>

<t>The KeyShare entry in the ExtendedKeyUpdate message MUST be the same
group mutually supported by the client and server during the initial
handshake. The peers MUST NOT send a KeyShare Entry in the ExtendedKeyUpdate
message that is not mutually supported by the client and server during 
the initial handshake. An implementation that receives any other value
MUST terminate the connection with an "illegal_parameter" alert.</t>

<t><xref target="fig-key-update"/> shows the interaction graphically.
First, support for the functionality in this specification
is negotiated in the ClientHello and the EncryptedExtensions
messages. Then, the ExtendedKeyUpdate message is sent to
update the application traffic secrets.</t>

<figure title="Extended Key Update Message Exchange." anchor="fig-key-update"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share
     | + signature_algorithms
     v + Extended_Key_Update       -------->
                                                  ServerHello  ^ Key
                                                  + key_share  | Exch
                                                               v
                                        {EncryptedExtensions   ^ Server
                                       + Extended_Key_Update}  | Params
                                         {CertificateRequest}  v
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v
                               <--------           
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]
                                  ...
       [ExtendedKeyUpdate]     -------->
                               <--------  [ExtendedKeyUpdate]
                                  ...
       [ExtendedKeyUpdate]     <-------
                               -------->  [ExtendedKeyUpdate]
                                  ...
       [Application Data]      <------->  [Application Data]
]]></artwork></figure>

<t>The structure of the ExtendedKeyUpdate message is shown below.
The sender starts the key update process and the receiver responds
with its key share. The extended key update always consists of two
messages, one from the sender to the receiver and another one from
the receiver to the sender. Both messages use the same format but the
response message MUST NOT have the request_update set to update_requested(1).</t>

<t>The structures for KeyUpdateRequest and KeyShareEntry are defined in
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<figure><artwork><![CDATA[
enum {
    update_not_requested(0), update_requested(1), (255)
} KeyUpdateRequest;

struct {
    KeyUpdateRequest request_update;
    KeyShareEntry key_share;
} ExtendedKeyUpdate;
]]></artwork></figure>

<t>If the request_update field is set to "update_requested", then the
receiver MUST send an ExtendedKeyUpdate of its own with request_update set to
"update_not_requested" prior to sending its next Application Data
record.  This mechanism allows either side to force an update to the
entire connection, but causes an implementation which receives
multiple ExtendedKeyUpdate while it is silent to respond with a single
update.  Note that implementations may receive an arbitrary number of
messages between sending a ExtendedKeyUpdate with request_update set to
"update_requested" and receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight.  However, because send and receive
keys are derived from independent traffic secrets, retaining the
receive traffic secret does not threaten the forward secrecy of data
sent before the sender changed keys.</t>

<t>Note: Implementations may receive an arbitrary number of
messages between one peer sending a ExtendedKeyUpdate and this peer
receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight. This design aspect needs to be
taken into account when designing APIs that inform applications
using this extended key update procedure to guarantee perfect
forward security.</t>

<t>If implementations independently send their own ExtendedKeyUpdate
messages, and they cross in flight, the result is that each
side increments keys by two generations.</t>

<t>Both sender and receiver MUST encrypt their ExtendedKeyUpdate messages with
the old keys. Both sides MUST enforce that a ExtendedKeyUpdate messages
with the old key is received before accepting any messages encrypted
with the new key. Failure to do so may allow message truncation
attacks.</t>

<t>If a sending implementation receives a ExtendedKeyUpdate with
request_update set to "update_requested", it MUST NOT send its own
ExtendedKeyUpdate if that would cause it to exceed these limits.
This may result in an eventual need to terminate the connection
when the limits in Section 5.5 of <xref target="I-D.ietf-tls-rfc8446bis"/> are
reached.</t>

<t>The ExtendedKeyUpdate and the KeyUpdates MAY be used in combination,
depending on the desired security properties.</t>

<t>The updated Handshake structure is shown in <xref target="fig-handshake"/>.</t>

<figure title="Handshake Structure." anchor="fig-handshake"><artwork><![CDATA[
      struct {
          HandshakeType msg_type;    /* handshake type */
          uint24 length;             /* bytes in message */
          select (Handshake.msg_type) {
              case client_hello:          ClientHello;
              case server_hello:          ServerHello;
              case end_of_early_data:     EndOfEarlyData;
              case encrypted_extensions:  EncryptedExtensions;
              case certificate_request:   CertificateRequest;
              case certificate:           Certificate;
              case certificate_verify:    CertificateVerify;
              case finished:              Finished;
              case new_session_ticket:    NewSessionTicket;
              case key_update:            KeyUpdate;
                          case extended_key_update:   ExtendedKeyUpdate;
          };
      } Handshake;
]]></artwork></figure>

</section>
<section anchor="dtls-13-specific-considerations"><name>DTLS 1.3-specific Considerations</name>

<t>DTLS 1.3 <xref target="RFC9147"/> requires the transmission of an ACK message to ensure
the reliable transmission of the KeyUpdate message. Since the design
of the ExtendedKeyUpdate message always requires a full roundtrip
there is no need for a dedicated ACK message.</t>

<t><xref target="fig-key-update-dtls"/> illustrates an example exchange of the
ExtendedKeyUpdate message used to update traffic secrets in
both directions in a DTLS 1.3 exchange.</t>

<figure title="DTLS 1.3 Extended Key Update Example." anchor="fig-key-update-dtls"><artwork><![CDATA[
   Client                                             Server

         /-------------------------------------------\
        |             Initial Handshake               |
         \-------------------------------------------/

    [Application Data]         ========>
    (epoch=3)

                               <========      [Application Data]
                                                       (epoch=3)

         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/

    [ExtendedKeyUpdate]
    (epoch 3)                  -------->


                               <========      [Application Data]
                                                       (epoch=3)

                                             [ExtendedKeyUpdate]
                               <--------               (epoch=3)

 /----------------------------\
|   Key Update (based on DH)   |
 \----------------------------/

    [Application Data]
    (epoch=4)                  ========>

                               <--------     [ExtendedKeyUpdate]
                                                       (epoch=3)

    [ExtendedKeyUpdate]        -------->
    (epoch=4)

                                /----------------------------\
                               |   Key Update (based on DH)   |
                                \----------------------------/

                               <========      [Application Data]
                                                       (epoch=4)
]]></artwork></figure>

<t>In order to facilitate epoch reconstruction in DTLS 1.3 (see
Section 4.2.2 of <xref target="RFC9147"/>), implementations MUST NOT send records
with the new keys or send a new ExtendedKeyUpdate messages until the
previous key update has been completed. This avoids having
too many epochs in active use.</t>

<t>Due to loss and/or reordering, DTLS 1.3 implementations may receive a
record with an older epoch than the current one (the requirements
above preclude receiving a newer record).  They SHOULD attempt to
process those records with that epoch (see Section 4.2.2 of <xref target="RFC9147"/>
for information on determining the correct epoch) but MAY opt to discard
such out-of-epoch records.</t>

<t>Due to the possibility of a response message of an initial ExtendedKeyUpdate
being lost and thereby preventing the sender of the ExtendedKeyUpdate from
updating its keying material, receivers MUST retain the pre-update keying material
until receipt and successful decryption of a message using the new
keys.</t>

</section>
</section>
<section anchor="key_update"><name>Updating Traffic Secrets</name>

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the ExtendedKeyUpdate handshake
message. The next generation of traffic keys is
computed by generating client_/server_application_traffic_secret_N+1
from client_/server_application_traffic_secret_N as described in this
section and then re-deriving the traffic keys, as described in
Section 7.3 of <xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>There are three changes to the application_traffic_secret computation
described in <xref target="I-D.ietf-tls-rfc8446bis"/>, namely</t>

<t><list style="symbols">
  <t>The application_traffic_secret_N is not used as an secret as it
may be already exfiltrated by the attacker.</t>
  <t>the label is adjusted to distinguish it from the classic KeyUpdate
message, and</t>
  <t>the Diffie-Hellman derived shared secret, as 'dh-secret', is used
as input to the HKDF-Expand-Label() function to produce the value sk.
sk is subsequently included as a secret value in the computation of
the application_traffic_secret_N+1, making the next generation
traffic key of the application traffic secret dependent on the
DH-derived value.</t>
</list></t>

<t>The next-generation application_traffic_secret is computed as follows:</t>

<figure><artwork><![CDATA[
sk = HKDF-Extract(0, dh-secret)

application_traffic_secret_N+1 =
    Derive-Secret(sk,"traffic upd 2",
                  application_traffic_secret_N)
]]></artwork></figure>

<t>The next generation of traffic keys is computed using the HKDF, as
defined in <xref target="RFC5869"/>, and its two components, HKDF-Extract and
HKDF-Expand, as recommended in Appendix F.1.1 of
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>Once client_/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated
traffic keys.</t>

<t>If a hybrid key exchange, based on <xref target="I-D.ietf-tls-hybrid-design"/>, is used then
the two shared secrets concatenated together serve as input to
the HKDF-Extract function to produce the value sk.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t><xref target="RFC9325"/> provides a good summary of what (perfect) forward secrecy
is and how it relates to the TLS protocol. In summary, it says:</t>

<t>"Forward secrecy (also called "perfect forward secrecy" or "PFS") is a
defense against an attacker who records encrypted conversations where
the session keys are only encrypted with the communicating parties'
long-term keys. Should the attacker be able to obtain these long-term
keys at some point later in time, the session keys and thus the entire
conversation could be decrypted."</t>

<t>Appendix F of <xref target="I-D.ietf-tls-rfc8446bis"/> goes into details of
explaining the security properties of the TLS 1.3 protocol and notes
"... forward secrecy without rerunning (EC)DHE does not stop an attacker
from doing static key exfiltration." It concludes with a recommendation
by saying: "Frequently rerunning (EC)DHE forces an attacker to do dynamic
key exfiltration (or content exfiltration)." (The term key exfiltration
is defined in <xref target="RFC7624"/>.)</t>

<t>This specification re-uses public key encryption to update application
traffic secrets in both direction. Unlike the classic Key Update message
defined in  <xref target="I-D.ietf-tls-rfc8446bis"/>, the key update procedure requires
two messages.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is requested to add the following entry to the "TLS Flags" extension
registry defined in <xref target="I-D.ietf-tls-tlsflags"/>:</t>

<t><list style="symbols">
  <t>Value: TBD1</t>
  <t>Flag Name: extended_key_update</t>
  <t>Messages: CH, EE</t>
  <t>Recommended: Y</t>
  <t>Reference: [This document]</t>
</list></t>

<t>IANA is requested to add the following entry to the
"TLS HandshakeType" <xref target="TLS-Ext-Registry"/> registry:</t>

<t><list style="symbols">
  <t>Value: TBD2</t>
  <t>Description: extended_key_update</t>
  <t>DTLS-OK: Y</t>
  <t>Reference: [This document]</t>
  <t>Comment:</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>


<reference anchor="I-D.ietf-tls-rfc8446bis">
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
         <organization>Windy Hill Systems, LLC</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This document specifies version 1.3 of the Transport Layer Security
   (TLS) protocol.  TLS allows client/server applications to communicate
   over the Internet in a way that is designed to prevent eavesdropping,
   tampering, and message forgery.

   This document updates RFCs 5705, 6066, 7627, and 8422 and obsoletes
   RFCs 5077, 5246, 6961, and 8446.  This document also specifies new
   requirements for TLS 1.2 implementations.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-rfc8446bis-09"/>
   
</reference>


<reference anchor="I-D.ietf-tls-tlsflags">
   <front>
      <title>A Flags Extension for TLS 1.3</title>
      <author fullname="Yoav Nir" initials="Y." surname="Nir">
         <organization>Dell Technologies</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   A number of extensions are proposed in the TLS working group that
   carry no interesting information except the 1-bit indication that a
   certain optional feature is supported.  Such extensions take 4 octets
   each.  This document defines a flags extension that can provide such
   indications at an average marginal cost of 1 bit each.  More
   precisely, it provides as many flag extensions as needed at 4 + the
   order of the last set bit divided by 8.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-tlsflags-12"/>
   
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9325">
  <front>
    <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
    <author fullname="Y. Sheffer" initials="Y." surname="Sheffer"/>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="T. Fossati" initials="T." surname="Fossati"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are used to protect data exchanged over a wide range of application protocols and can also form the basis for secure transport protocols. Over the years, the industry has witnessed several serious attacks on TLS and DTLS, including attacks on the most commonly used cipher suites and their modes of operation. This document provides the latest recommendations for ensuring the security of deployed services that use TLS and DTLS. These recommendations are applicable to the majority of use cases.</t>
      <t>RFC 7525, an earlier version of the TLS recommendations, was published when the industry was transitioning to TLS 1.2. Years later, this transition is largely complete, and TLS 1.3 is widely available. This document updates the guidance given the new environment and obsoletes RFC 7525. In addition, this document updates RFCs 5288 and 6066 in view of recent attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="195"/>
  <seriesInfo name="RFC" value="9325"/>
  <seriesInfo name="DOI" value="10.17487/RFC9325"/>
</reference>

<reference anchor="RFC7624">
  <front>
    <title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="B. Schneier" initials="B." surname="Schneier"/>
    <author fullname="C. Jennings" initials="C." surname="Jennings"/>
    <author fullname="T. Hardie" initials="T." surname="Hardie"/>
    <author fullname="B. Trammell" initials="B." surname="Trammell"/>
    <author fullname="C. Huitema" initials="C." surname="Huitema"/>
    <author fullname="D. Borkmann" initials="D." surname="Borkmann"/>
    <date month="August" year="2015"/>
    <abstract>
      <t>Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered. In this document, we develop a threat model that describes these attacks on Internet confidentiality. We assume an attacker that is interested in undetected, indiscriminate eavesdropping. The threat model is based on published, verified attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7624"/>
  <seriesInfo name="DOI" value="10.17487/RFC7624"/>
</reference>


<reference anchor="I-D.ietf-tls-hybrid-design">
   <front>
      <title>Hybrid key exchange in TLS 1.3</title>
      <author fullname="Douglas Stebila" initials="D." surname="Stebila">
         <organization>University of Waterloo</organization>
      </author>
      <author fullname="Scott Fluhrer" initials="S." surname="Fluhrer">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Shay Gueron" initials="S." surname="Gueron">
         <organization>University of Haifa</organization>
      </author>
      <date day="7" month="September" year="2023"/>
      <abstract>
	 <t>   Hybrid key exchange refers to using multiple key exchange algorithms
   simultaneously and combining the result with the goal of providing
   security even if all but one of the component algorithms is broken.
   It is motivated by transition to post-quantum cryptography.  This
   document provides a construction for hybrid key exchange in the
   Transport Layer Security (TLS) protocol version 1.3.

   Discussion of this work is encouraged to happen on the TLS IETF
   mailing list tls@ietf.org or on the GitHub repository which contains
   the draft: https://github.com/dstebila/draft-ietf-tls-hybrid-design.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-hybrid-design-09"/>
   
</reference>


<reference anchor="ANSSI-DAT-NT-003" target="https://www.ssi.gouv.fr/uploads/2015/09/NT_IPsec_EN.pdf">
  <front>
    <title>Recommendations for securing networks with IPsec, Technical Report</title>
    <author >
      <organization>ANSSI</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>
<reference anchor="TLS-Ext-Registry" target="https://www.iana.org/assignments/tls-extensiontype-values">
  <front>
    <title>Transport Layer Security (TLS) Extensions</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="November"/>
  </front>
</reference>


    </references>


<?line 480?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the members of the "TSVWG DTLS for SCTP
Requirements Design Team" for their discussion. The members, in
no particular order, are:</t>

<t><list style="symbols">
  <t>Marcelo Ricardo Leitner</t>
  <t>Zaheduzzaman Sarker</t>
  <t>Magnus Westerlund</t>
  <t>John Mattsson</t>
  <t>Claudio Porfiri</t>
  <t>Xin Long</t>
  <t>Michael Tüxen</t>
  <t>Hannes Tschofenig</t>
  <t>K Tirumaleswar Reddy</t>
  <t>Bertrand Rault</t>
</list></t>

<t>Additionally, we would like to thank the chairs of the
Transport and Services Working Group (tsvwg) Gorry Fairhurst and
Marten Seemann as well as the responsible area director Martin Duke.</t>

<t>Finally, we would like to thank Martin Thomson for his review of
this specification.</t>

</section>
<section anchor="alternative-designs-considered"><name>Alternative Designs Considered</name>

<t>The design presented in this document utilizes an ephemeral Diffie-Hellman,
which requires a full roundtrip since both parties need to exchange their
ephemeral public keys. Since the Key Update design defined in TLS 1.3
utilizes a one-shot message, this new extension changes the behavior and
is less efficient.</t>

<t>During the design of this specification two alternatives have been considered,
which retained the original design spirit of the one-shot Key Update message
by utilizing an ephemeral-static Diffie-Hellman. The static public key thereby
represents a previously exchanged Diffie-Hellman public key. For the first 
Key Update message sent, this public key would thereby be the Diffie-Hellman
public key from the key share in the initial ClientHello/ServerHello handshake
message exchange. We considered two designs, one using a classical ephemeral-static
Diffie-Hellman and a second design based on the Hybrid Public Key Encryption (HPKE)
specification. HPKE is already used in the encrypted ClientHello and may
therefore be present already in TLS stacks.</t>

<t>Ultimately, we decided against such an approach since it requires an implementation
to keep their Diffie-Hellman public and private keys somewhere in memory (even
though it is possible to utilize available hardware security modules to store
the private key). The design in this document allows an implementation to discard
this ephemeral Diffie-Hellman key pair immediately after the key update procedure
has been finalized.</t>

</section>


  </back>

<!-- ##markdown-source:
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
V3maoOLAz6MRwf4XZUPoi2BXAAA=

-->

</rfc>

