<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-tls-extended-key-update-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Extended Key Update for TLS">Extended Key Update for Transport Layer Security (TLS) 1.3</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="M." surname="Tüxen" fullname="Michael Tüxen">
      <organization>Münster Univ. of Applied Sciences</organization>
      <address>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>
    <author initials="T." surname="Reddy" fullname="Tirumaleswar Reddy">
      <organization>Nokia</organization>
      <address>
        <email>kondtir@gmail.com</email>
      </address>
    </author>
    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization>Siemens</organization>
      <address>
        <email>steffen.fries@siemens.com</email>
      </address>
    </author>

    <date year="2024" month="January" day="04"/>

    <area>Security</area>
    <workgroup>TLS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 70?>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
message to update cryptographic keys during the lifetime of an ongoing session.
It allows the sender to perform an update of the key and initialization vector
and may trigger the recipient, via the request_update field, to transmit a
key update message in the reverse direction.</t>

<t>In environments where sessions are long-lived, such as industrial IoT or
telecommunication networks, this key update along is insufficient since
perfect forward secrecy is not offered via this mechanism. Earlier versions
of TLS allowed the two peers to perform renegotiation, which is a handshake
that establishes new cryptographic parameters for an existing session.
When a security vulnerability with the renegotiation mechanism was discovered,
RFC 5746 was standardized as a fix. Renegotiation has, however, been removed
from TLS 1.3.</t>

<t>This specification defines an extended key update message that supports
perfect forward secrecy using a Diffie-Hellman key exchange.</t>



    </abstract>



  </front>

  <middle>


<?line 90?>

<section anchor="introduction"><name>Introduction</name>

<t>The features of TLS and DTLS have changed over the years and while newer versions
optimized and enhanced features (often with the help of extensions) some functionality
was removed without replacement. The ability to update keys and initialization vectors
with forward secrecy has been added in TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> using the
KeyUpdate message and it intended to (partially) replace renegotiation from earlier
TLS versions. The renegotiation feature, while complex, offered additional
functionality that is not supported with TLS 1.3 anymore, including the update
keys with a Diffie-Hellman exchange during the lifetime of a session. If a traffic secret (application_traffic_secret_N) has been compromised, an attacker can passively 
eavesdrop on all future data sent on the connection, including data
encrypted with application_traffic_secret_N+1, application_traffic_secret_N+2, etc.</t>

<t>While such a feature is less relevant in environments with shorter-lived sessions,
such as transactions on the web, there are uses of TLS and DTLS where long-lived
sessions are common. In those environments, such as industrial IoT and
telecommunication networks, availability is important and an interruption of the
communication due to periodic session resumptions is not an option. A full handshake 
with (EC)DHE gives protection against active attackers but prevents the use 
of long-lived sessions.</t>

<t>Some deployments have used IPsec in the past and have now decided to switch to TLS
or DTLS instead and the requirement for updates of cryptographic keys for an existing
session has become a requirement. For IPsec, NIST, BSI, and ANSSI recommends very frequent
re-run of Diffie-Hellman to provide forward secrecy and force attackers to perform a
dynamic key extraction <xref target="RFC7624"/>. ANSSI writes "It is recommended to force the periodic
renewal of the keys, e.g., every hour and every 100 GB of data, in order to limit the
impact of a key compromise." <xref target="ANSSI-DAT-NT-003"/>.</t>

<t>This specification defines a new, extended key update message supporting perfect
forward secrecy. It does so by utilizing a Diffie-Hellman exchange using one of the
groups negotiated during the initial exchange. The support for this extension is
signaled using the TLS flags extension mechanism. The frequent re-running of extended
key update forces an attacker to do dynamic key exfiltration.</t>

<t>This specification is applicable to both TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> and
DTLS 1.3 <xref target="RFC9147"/>. Throughout the specification we do not distinguish between
these two protocols unless necessary for better understanding.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>To distinguish the key update procedure defined in <xref target="I-D.ietf-tls-rfc8446bis"/>
from the key update procedure specified in this document, we use the terms
"classic key update" and "extended key update", respectively.</t>

</section>
<section anchor="extensions"><name>Extensions</name>

<t>Client and servers use the TLS flags extension <xref target="I-D.ietf-tls-tlsflags"/>
to indicate support for the functionality defined in this document. We
call this the "extended_key_update" extension and the corresponding
flag is called "Extended_Key_Update" flag.</t>

<t>The "Extended_Key_Update" flag proposed by the client in the ClientHello
(CH) MUST be acknowledged in the EncryptedExtensions (EE), if the
server also supports the functionality defined in this document and
is configured to use it.</t>

<t>If the "Extended_Key_Update" flag is not set, servers
ignore any the functionality specified in this document and applications
that require perfect forward security will have to initiate a full handshake.</t>

</section>
<section anchor="extended-key-update"><name>Extended Key Update</name>

<section anchor="generic-considerations"><name>Generic Considerations</name>

<t>The ExtendedKeyUpdate handshake message is used to indicate an update
of cryptographic keys. This key update process can be sent by either
peer after it has sent a Finished message.  Implementations that
receive a ExtendedKeyUpdate message prior to receiving a Finished
message MUST terminate the connection with an "unexpected_message"
alert.</t>

<t>The design of the ExtendedKeyUpdate message follows the design of
the classic KeyUpdate message. Both allow the update of keys in
one direction only. However, the ExtendedKeyUpdate message requires
a full-roundtrip due to the nature of the Diffie-Hellman exchange.</t>

<t>The KeyShare entry in the ExtendedKeyUpdate message MUST be the same
group mutually supported by the client and server during the initial
handshake. The peers MUST NOT send a KeyShare Entry in the ExtendedKeyUpdate
message that is not mutually supported by the client and server during 
the initial handshake. An implementation that receives any other value
MUST terminate the connection with an "illegal_parameter" alert.</t>

<t><xref target="fig-key-update"/> shows the interaction graphically.
First, support for the functionality in this specification
is negotiated in the ClientHello and the EncryptedExtensions
messages. Then, the ExtendedKeyUpdate message is sent to
update the application traffic secrets.</t>

<figure title="Extended Key Update Message Exchange." anchor="fig-key-update"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share
     | + signature_algorithms
     v + Extended_Key_Update       -------->
                                                  ServerHello  ^ Key
                                                  + key_share  | Exch
                                                               v
                                        {EncryptedExtensions   ^ Server
                                       + Extended_Key_Update}  | Params
                                         {CertificateRequest}  v
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v
                               <--------           
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]
                                  ...
       [ExtendedKeyUpdate]     -------->
                               <--------  [ExtendedKeyUpdate]
                                  ...
       [ExtendedKeyUpdate]     <-------
                               -------->  [ExtendedKeyUpdate]
                                  ...
       [Application Data]      <------->  [Application Data]
]]></artwork></figure>

<t>The structure of the ExtendedKeyUpdate message is shown below.
The sender starts the key update process and the receiver responds
with its key share. The extended key update always consists of two
messages, one from the sender to the receiver and another one from
the receiver to the sender. Both messages use the same format but the
response message MUST NOT have the request_update set to update_requested(1).</t>

<t>The structures for KeyUpdateRequest and KeyShareEntry are defined in
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<figure><artwork><![CDATA[
enum {
    update_not_requested(0), update_requested(1), (255)
} KeyUpdateRequest;

struct {
    KeyUpdateRequest request_update;
    KeyShareEntry key_share;
} ExtendedKeyUpdate;
]]></artwork></figure>

<t>If the request_update field is set to "update_requested", then the
receiver MUST send an ExtendedKeyUpdate of its own with request_update set to
"update_not_requested" prior to sending its next Application Data
record.  This mechanism allows either side to force an update to the
entire connection, but causes an implementation which receives
multiple ExtendedKeyUpdate while it is silent to respond with a single
update.  Note that implementations may receive an arbitrary number of
messages between sending a ExtendedKeyUpdate with request_update set to
"update_requested" and receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight.  However, because send and receive
keys are derived from independent traffic secrets, retaining the
receive traffic secret does not threaten the forward secrecy of data
sent before the sender changed keys.</t>

<t>Note: Implementations may receive an arbitrary number of
messages between one peer sending a ExtendedKeyUpdate and this peer
receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight. This design aspect needs to be
taken into account when designing APIs that inform applications
using this extended key update procedure to guarantee perfect
forward security.</t>

<t>If implementations independently send their own ExtendedKeyUpdate
messages, and they cross in flight, the result is that each
side increments keys by two generations.</t>

<t>Both sender and receiver MUST encrypt their ExtendedKeyUpdate messages with
the old keys. Both sides MUST enforce that a ExtendedKeyUpdate messages
with the old key is received before accepting any messages encrypted
with the new key. Failure to do so may allow message truncation
attacks.</t>

<t>If a sending implementation receives a ExtendedKeyUpdate with
request_update set to "update_requested", it MUST NOT send its own
ExtendedKeyUpdate if that would cause it to exceed these limits.
This may result in an eventual need to terminate the connection
when the limits in Section 5.5 of <xref target="I-D.ietf-tls-rfc8446bis"/> are
reached.</t>

<t>The ExtendedKeyUpdate and the KeyUpdates MAY be used in combination,
depending on the desired security properties.</t>

<t>The updated Handshake structure is shown in <xref target="fig-handshake"/>.</t>

<figure title="Handshake Structure." anchor="fig-handshake"><artwork><![CDATA[
      struct {
          HandshakeType msg_type;    /* handshake type */
          uint24 length;             /* bytes in message */
          select (Handshake.msg_type) {
              case client_hello:          ClientHello;
              case server_hello:          ServerHello;
              case end_of_early_data:     EndOfEarlyData;
              case encrypted_extensions:  EncryptedExtensions;
              case certificate_request:   CertificateRequest;
              case certificate:           Certificate;
              case certificate_verify:    CertificateVerify;
              case finished:              Finished;
              case new_session_ticket:    NewSessionTicket;
              case key_update:            KeyUpdate;
                          case extended_key_update:   ExtendedKeyUpdate;
          };
      } Handshake;
]]></artwork></figure>

</section>
<section anchor="dtls-13-specific-considerations"><name>DTLS 1.3-specific Considerations</name>

<t>DTLS 1.3 <xref target="RFC9147"/> requires the transmission of an ACK message to ensure
the reliable transmission of the KeyUpdate message. Since the design
of the ExtendedKeyUpdate message always requires a full roundtrip
there is no need for a dedicated ACK message.</t>

<t><xref target="fig-key-update-dtls"/> illustrates an example exchange of the
ExtendedKeyUpdate message used to update traffic secrets in
both directions in a DTLS 1.3 exchange.</t>

<figure title="DTLS 1.3 Extended Key Update Example." anchor="fig-key-update-dtls"><artwork><![CDATA[
   Client                                             Server

         /-------------------------------------------\
        |             Initial Handshake               |
         \-------------------------------------------/

    [Application Data]         ========>
    (epoch=3)

                               <========      [Application Data]
                                                       (epoch=3)

         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/

    [ExtendedKeyUpdate]
    (epoch 3)                  -------->


                               <========      [Application Data]
                                                       (epoch=3)

                                             [ExtendedKeyUpdate]
                               <--------               (epoch=3)

 /----------------------------\
|   Key Update (based on DH)   |
 \----------------------------/

    [Application Data]
    (epoch=4)                  ========>

                               <--------     [ExtendedKeyUpdate]
                                                       (epoch=3)

    [ExtendedKeyUpdate]        -------->
    (epoch=4)

                                /----------------------------\
                               |   Key Update (based on DH)   |
                                \----------------------------/

                               <========      [Application Data]
                                                       (epoch=4)
]]></artwork></figure>

<t>In order to facilitate epoch reconstruction in DTLS 1.3 (see
Section 4.2.2 of <xref target="RFC9147"/>), implementations MUST NOT send records
with the new keys or send a new ExtendedKeyUpdate messages until the
previous key update has been completed. This avoids having
too many epochs in active use.</t>

<t>Due to loss and/or reordering, DTLS 1.3 implementations may receive a
record with an older epoch than the current one (the requirements
above preclude receiving a newer record).  They SHOULD attempt to
process those records with that epoch (see Section 4.2.2 of <xref target="RFC9147"/>
for information on determining the correct epoch) but MAY opt to discard
such out-of-epoch records.</t>

<t>Due to the possibility of a response message of an initial ExtendedKeyUpdate
being lost and thereby preventing the sender of the ExtendedKeyUpdate from
updating its keying material, receivers MUST retain the pre-update keying material
until receipt and successful decryption of a message using the new
keys.</t>

</section>
</section>
<section anchor="key_update"><name>Updating Traffic Secrets</name>

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the ExtendedKeyUpdate handshake
message. The next generation of traffic keys is
computed by generating client_/server_application_traffic_secret_N+1
from client_/server_application_traffic_secret_N as described in this
section and then re-deriving the traffic keys, as described in
Section 7.3 of <xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>There are three changes to the application_traffic_secret computation
described in <xref target="I-D.ietf-tls-rfc8446bis"/>, namely</t>

<t><list style="symbols">
  <t>The application_traffic_secret_N is not used as an secret as it
may be already exfiltrated by the attacker.</t>
  <t>the label is adjusted to distinguish it from the classic KeyUpdate
message, and</t>
  <t>the Diffie-Hellman derived shared secret, as 'dh-secret', is used
as input to the HKDF-Expand-Label() function to produce the value sk.
sk is subsequently included as a secret value in the computation of
the application_traffic_secret_N+1, making the next generation
traffic key of the application traffic secret dependent on the
DH-derived value.</t>
</list></t>

<t>The next-generation application_traffic_secret is computed as follows:</t>

<figure><artwork><![CDATA[
sk = HKDF-Extract(0, dh-secret)

application_traffic_secret_N+1 =
    Derive-Secret(sk,"traffic upd 2",
                  application_traffic_secret_N)
]]></artwork></figure>

<t>The next generation of traffic keys is computed using the HKDF, as
defined in <xref target="RFC5869"/>, and its two components, HKDF-Extract and
HKDF-Expand, as recommended in Appendix F.1.1 of
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>Once client_/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated
traffic keys.</t>

<t>If a hybrid key exchange, based on <xref target="I-D.ietf-tls-hybrid-design"/>, is used then
the two shared secrets concatenated together serve as input to
the HKDF-Extract function to produce the value sk.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t><xref target="RFC9325"/> provides a good summary of what (perfect) forward secrecy
is and how it relates to the TLS protocol. In summary, it says:</t>

<t>"Forward secrecy (also called "perfect forward secrecy" or "PFS") is a
defense against an attacker who records encrypted conversations where
the session keys are only encrypted with the communicating parties'
long-term keys. Should the attacker be able to obtain these long-term
keys at some point later in time, the session keys and thus the entire
conversation could be decrypted."</t>

<t>Appendix F of <xref target="I-D.ietf-tls-rfc8446bis"/> goes into details of
explaining the security properties of the TLS 1.3 protocol and notes
"... forward secrecy without rerunning (EC)DHE does not stop an attacker
from doing static key exfiltration." It concludes with a recommendation
by saying: "Frequently rerunning (EC)DHE forces an attacker to do dynamic
key exfiltration (or content exfiltration)." (The term key exfiltration
is defined in <xref target="RFC7624"/>.)</t>

<t>This specification re-uses public key encryption to update application
traffic secrets in both direction. Unlike the classic Key Update message
defined in  <xref target="I-D.ietf-tls-rfc8446bis"/>, the key update procedure requires
two messages.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is requested to add the following entry to the "TLS Flags" extension
registry defined in <xref target="I-D.ietf-tls-tlsflags"/>:</t>

<t><list style="symbols">
  <t>Value: TBD1</t>
  <t>Flag Name: extended_key_update</t>
  <t>Messages: CH, EE</t>
  <t>Recommended: Y</t>
  <t>Reference: [This document]</t>
</list></t>

<t>IANA is requested to add the following entry to the
"TLS HandshakeType" <xref target="TLS-Ext-Registry"/> registry:</t>

<t><list style="symbols">
  <t>Value: TBD2</t>
  <t>Description: extended_key_update</t>
  <t>DTLS-OK: Y</t>
  <t>Reference: [This document]</t>
  <t>Comment:</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>


<reference anchor="I-D.ietf-tls-rfc8446bis">
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
         <organization>Windy Hill Systems, LLC</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This document specifies version 1.3 of the Transport Layer Security
   (TLS) protocol.  TLS allows client/server applications to communicate
   over the Internet in a way that is designed to prevent eavesdropping,
   tampering, and message forgery.

   This document updates RFCs 5705, 6066, 7627, and 8422 and obsoletes
   RFCs 5077, 5246, 6961, and 8446.  This document also specifies new
   requirements for TLS 1.2 implementations.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-rfc8446bis-09"/>
   
</reference>


<reference anchor="I-D.ietf-tls-tlsflags">
   <front>
      <title>A Flags Extension for TLS 1.3</title>
      <author fullname="Yoav Nir" initials="Y." surname="Nir">
         <organization>Dell Technologies</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   A number of extensions are proposed in the TLS working group that
   carry no interesting information except the 1-bit indication that a
   certain optional feature is supported.  Such extensions take 4 octets
   each.  This document defines a flags extension that can provide such
   indications at an average marginal cost of 1 bit each.  More
   precisely, it provides as many flag extensions as needed at 4 + the
   order of the last set bit divided by 8.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-tlsflags-12"/>
   
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9325">
  <front>
    <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
    <author fullname="Y. Sheffer" initials="Y." surname="Sheffer"/>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="T. Fossati" initials="T." surname="Fossati"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are used to protect data exchanged over a wide range of application protocols and can also form the basis for secure transport protocols. Over the years, the industry has witnessed several serious attacks on TLS and DTLS, including attacks on the most commonly used cipher suites and their modes of operation. This document provides the latest recommendations for ensuring the security of deployed services that use TLS and DTLS. These recommendations are applicable to the majority of use cases.</t>
      <t>RFC 7525, an earlier version of the TLS recommendations, was published when the industry was transitioning to TLS 1.2. Years later, this transition is largely complete, and TLS 1.3 is widely available. This document updates the guidance given the new environment and obsoletes RFC 7525. In addition, this document updates RFCs 5288 and 6066 in view of recent attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="195"/>
  <seriesInfo name="RFC" value="9325"/>
  <seriesInfo name="DOI" value="10.17487/RFC9325"/>
</reference>

<reference anchor="RFC7624">
  <front>
    <title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="B. Schneier" initials="B." surname="Schneier"/>
    <author fullname="C. Jennings" initials="C." surname="Jennings"/>
    <author fullname="T. Hardie" initials="T." surname="Hardie"/>
    <author fullname="B. Trammell" initials="B." surname="Trammell"/>
    <author fullname="C. Huitema" initials="C." surname="Huitema"/>
    <author fullname="D. Borkmann" initials="D." surname="Borkmann"/>
    <date month="August" year="2015"/>
    <abstract>
      <t>Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered. In this document, we develop a threat model that describes these attacks on Internet confidentiality. We assume an attacker that is interested in undetected, indiscriminate eavesdropping. The threat model is based on published, verified attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7624"/>
  <seriesInfo name="DOI" value="10.17487/RFC7624"/>
</reference>


<reference anchor="I-D.ietf-tls-hybrid-design">
   <front>
      <title>Hybrid key exchange in TLS 1.3</title>
      <author fullname="Douglas Stebila" initials="D." surname="Stebila">
         <organization>University of Waterloo</organization>
      </author>
      <author fullname="Scott Fluhrer" initials="S." surname="Fluhrer">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Shay Gueron" initials="S." surname="Gueron">
         <organization>University of Haifa</organization>
      </author>
      <date day="7" month="September" year="2023"/>
      <abstract>
	 <t>   Hybrid key exchange refers to using multiple key exchange algorithms
   simultaneously and combining the result with the goal of providing
   security even if all but one of the component algorithms is broken.
   It is motivated by transition to post-quantum cryptography.  This
   document provides a construction for hybrid key exchange in the
   Transport Layer Security (TLS) protocol version 1.3.

   Discussion of this work is encouraged to happen on the TLS IETF
   mailing list tls@ietf.org or on the GitHub repository which contains
   the draft: https://github.com/dstebila/draft-ietf-tls-hybrid-design.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-hybrid-design-09"/>
   
</reference>


<reference anchor="ANSSI-DAT-NT-003" target="https://www.ssi.gouv.fr/uploads/2015/09/NT_IPsec_EN.pdf">
  <front>
    <title>Recommendations for securing networks with IPsec, Technical Report</title>
    <author >
      <organization>ANSSI</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>
<reference anchor="TLS-Ext-Registry" target="https://www.iana.org/assignments/tls-extensiontype-values">
  <front>
    <title>Transport Layer Security (TLS) Extensions</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="November"/>
  </front>
</reference>


    </references>


<?line 485?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the members of the "TSVWG DTLS for SCTP
Requirements Design Team" for their discussion. The members, in
no particular order, are:</t>

<t><list style="symbols">
  <t>Marcelo Ricardo Leitner</t>
  <t>Zaheduzzaman Sarker</t>
  <t>Magnus Westerlund</t>
  <t>John Mattsson</t>
  <t>Claudio Porfiri</t>
  <t>Xin Long</t>
  <t>Michael Tüxen</t>
  <t>Hannes Tschofenig</t>
  <t>K Tirumaleswar Reddy</t>
  <t>Bertrand Rault</t>
</list></t>

<t>Additionally, we would like to thank the chairs of the
Transport and Services Working Group (tsvwg) Gorry Fairhurst and
Marten Seemann as well as the responsible area director Martin Duke.</t>

<t>Finally, we would like to thank Martin Thomson for his review of
this specification.</t>

</section>
<section anchor="alternative-designs-considered"><name>Alternative Designs Considered</name>

<t>The design presented in this document utilizes an ephemeral Diffie-Hellman,
which requires a full roundtrip since both parties need to exchange their
ephemeral public keys. Since the Key Update design defined in TLS 1.3
utilizes a one-shot message, this new extension changes the behavior and
is less efficient.</t>

<t>During the design of this specification two alternatives have been considered,
which retained the original design spirit of the one-shot Key Update message
by utilizing an ephemeral-static Diffie-Hellman. The static public key thereby
represents a previously exchanged Diffie-Hellman public key. For the first 
Key Update message sent, this public key would thereby be the Diffie-Hellman
public key from the key share in the initial ClientHello/ServerHello handshake
message exchange. We considered two designs, one using a classical ephemeral-static
Diffie-Hellman and a second design based on the Hybrid Public Key Encryption (HPKE)
specification. HPKE is already used in the encrypted ClientHello and may
therefore be present already in TLS stacks.</t>

<t>Ultimately, we decided against such an approach since it requires an implementation
to keep their Diffie-Hellman public and private keys somewhere in memory (even
though it is possible to utilize available hardware security modules to store
the private key). The design in this document allows an implementation to discard
this ephemeral Diffie-Hellman key pair immediately after the key update procedure
has been finalized.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA81cW3PbyJV+V5X+QxfnIdKEpGyNPZORM6loLHmsHVv2WnK8
2WyiahJNslcgwEUDojmO88vylj+23zmnuwGQIC17k6pFzYUC0N2nz/3WGAwG
+3ulLVNzos7flyZLTKJ+Niv1dpHo0qhJXqjrQmdukReleqFXplBXZlwVtlyp
g+sXV4fq4fCb/b39PT0aFeZuxywvrvb3knyc6TnWSgo9KQelG8/yicnsdFCm
bmD80MGtWQ0qHjp48GB/b4wf07xYnShXJrSWXRQnqiwqVx4/ePD9g2OsXhh9
EiHb31vmxe20yKvFiSyMGXErOVEXWWmKzJSDM4KAJnOlzpIbneYZ4FoZt7+3
sCf7e0oVk7FJXLlKw32lynzc/G0BbVbGOw44KszE1TdW8/bfZWHH9fvjfD7H
+Pq5zVKbNVYDQgapdeUAE43yFC8O8q9/TY+AyLleLGw29W/rqpzlBcE9oOd0
2QwDng/VdcRyeCI0eK6zzLiOx2aubXqiZvx8WBPp99P5+yFwF97Li+nmgi+x
4D/+/t5k7cVe2vFMm3TtmV+prAxu/n4yG8wrkzlQaJiY5irq5T/+zvfV28ze
DVU+UaeLRWrBZldja7IxI6wNyPVQvTFJsmrDcW2Laq5T45a6aD/3sNzmWVLa
AnvFn0OQqAXHZX5rtVIbi10N1bPCCtnqxa5KMwHm2o/8Ok6eDSf07PfOGrCC
21jvSu4Tn2Z5MdelvTPMnG+ePT1++PB7/n0xOBtaU05YiMC1v3n06NuRdZvP
8O8k1VMXZvj+4aPvwu/Hv/mWZrPZZH2d7785fhx+f/ft8aPNeWerUWGTQWKc
nWb8+PTy6gqvnF4PLq8hw9+c+F3VbKoau+S3/T2vjN4YkQ4oAZtnjlWIY/HO
pgo8SALu1NKWM3XxGg/66tqMZ5kd6xRjSVuF+XQxNZC5WVku3MnR0XK5HDpn
h9O8ugPyj6pFmuvEHR0/ePj46MH3R5fXNzzhzfnlcJFM/CykiwBnNYXOUfQq
3YdmGUDdDd6YKYQU+mnnJi9OL0/be/yEYmVN6mj3O7ZidaaHmP9IO0I+65Oj
qExpdLlamMGdTqvIgrKZy/zOzEdY9vjBMWvwwWCg9Agb0WNWjNczcw/dr9zC
jO0EiCdCQTInpnBKK+hxumegsOfGOT010JhKtLoaF6tFmU8LvZjZsYJydioR
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
QZ9HY4L9L5kuICzQVwAA

-->

</rfc>

