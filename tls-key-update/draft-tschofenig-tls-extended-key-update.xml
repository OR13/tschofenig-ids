<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-tls-extended-key-update-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Extended Key Update for TLS">Extended Key Update for Transport Layer Security (TLS) 1.3</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="M." surname="Tuexen" fullname="Michael Tuexen">
      <organization>Muenster Univ. of Applied Sciences</organization>
      <address>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>
    <author initials="T." surname="Reddy" fullname="Tirumaleswar Reddy">
      <organization>Nokia</organization>
      <address>
        <email>kondtir@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="December" day="21"/>

    <area>Security</area>
    <workgroup>TLS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 65?>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
message to update cryptographic keys during the lifetime of an ongoing session.
It allows the sender to perform an update of the key and initialization vector
and may trigger the recipient, via the request_update field, to transmit a
key update message in the reverse direction.</t>

<t>In environments where sessions are long-lived, such as industrial IoT or
telecommunication networks, this key update along is insufficient since
perfect forward secrecy is not offered via this mechanism. Earlier versions
of TLS allowed the two peers to perform renegotiation, which is a handshake
that establishes new cryptographic parameters for an existing session.
When a security vulnerability with the renegotiation mechanism was discovered,
RFC 5746 was standardized as a fix. Renegotiation has, however, been removed
from TLS 1.3.</t>

<t>This specification defines an extended key update message that supports
perfect forward secrecy using a Diffie-Hellman key exchange.</t>



    </abstract>



  </front>

  <middle>


<?line 85?>

<section anchor="introduction"><name>Introduction</name>

<t>The features of TLS and DTLS have changed over the years and while newer versions
optimized and enhanced features (often with the help of extensions) some functionality
was removed without replacement. The ability to update keys and initialization vectors
with forward secrecy has been added in TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> using the
KeyUpdate message and it intended to (partially) replace renegotiation from earlier
TLS versions. The renegotiation feature, while complex, offered additional
functionality that is not supported with TLS 1.3 anymore, including the update
keys with a Diffie-Hellman exchange during the lifetime of a session. If a traffic secret (application_traffic_secret_N) has been compromised, an attacker can passively 
eavesdrop on all future data sent on the connection, including data
encrypted with application_traffic_secret_N+1, application_traffic_secret_N+2, etc.</t>

<t>While such a feature is less relevant in environments with shorter-lived sessions,
such as transactions on the web, there are uses of TLS and DTLS where long-lived
sessions are common. In those environments, such as industrial IoT and
telecommunication networks, availability is important and an interruption of the
communication due to periodic session resumptions is not an option. A full handshake 
with (EC)DHE gives protection against active attackers but prevents the use 
of long-lived sessions.</t>

<t>Some deployments have used IPsec in the past and have now decided to switch to TLS
or DTLS instead and the requirement for updates of cryptographic keys for an existing
session has become a requirement. For IPsec, NIST, BSI, and ANSSI recommends very frequent
re-run of Diffie-Hellman to provide forward secrecy and force attackers to perform a
dynamic key extraction <xref target="RFC7624"/>. ANSSI writes "It is recommended to force the periodic
renewal of the keys, e.g., every hour and every 100 GB of data, in order to limit the
impact of a key compromise." <xref target="ANSSI-DAT-NT-003"/>.</t>

<t>This specification defines a new, extended key update message supporting perfect
forward secrecy. It does so by utilizing a Diffie-Hellman exchange using one of the
groups negotiated during the initial exchange. The support for this extension is
signaled using the TLS flags extension mechanism. The frequent re-running of extended key</t>

<t>update forces an attacker to do dynamic key exfiltration.</t>

<t>This specification is applicable to both TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> and
DTLS 1.3 <xref target="RFC9147"/>. Throughout the specification we do not distinguish between
these two protocols unless necessary for better understanding.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>To distinguish the key update procedure defined in <xref target="I-D.ietf-tls-rfc8446bis"/>
from the key update procedure specified in this document, we use the terms
"classic key update" and "extended key update", respectively.</t>

</section>
<section anchor="extensions"><name>Extensions</name>

<t>Client and servers use the TLS flags extension <xref target="I-D.ietf-tls-tlsflags"/>
to indicate support for the functionality defined in this document. We
call this the "extended_key_update" extension and the corresponding
flag is called "Extended_Key_Update" flag.</t>

<t>The "Extended_Key_Update" flag proposed by the client in the ClientHello
(CH) MUST be acknowledged in the EncryptedExtensions (EE), if the
server also supports the functionality defined in this document and
is configured to use it.</t>

<t>If the "Extended_Key_Update" flag is not set, servers
ignore any the functionality specified in this document and applications
that require perfect forward security will have to initiate a full handshake.</t>

</section>
<section anchor="extended-key-update"><name>Extended Key Update</name>

<section anchor="generic-considerations"><name>Generic Considerations</name>

<t>The ExtendedKeyUpdate handshake message is used to indicate an update
of cryptographic keys. This key update process can be sent by either
peer after it has sent a Finished message.  Implementations that
receive a ExtendedKeyUpdate message prior to receiving a Finished
message MUST terminate the connection with an "unexpected_message"
alert.</t>

<t>The design of the ExtendedKeyUpdate message follows the design of
the classic KeyUpdate message. Both allow the update of keys in
one direction only. However, the ExtendedKeyUpdate message requires
a full-roundtrip due to the nature of the Diffie-Hellman exchange.</t>

<t>The KeyShare entry in the ExtendedKeyUpdate message MUST be the same</t>

<t>group mutually supported by the client and server during the initial
handshake. The peers MUST NOT send a KeyShare Entry in the ExtendedKeyUpdate
message that is not mutually supported by the client and server during 
the initial handshake. An implementation that receives any other value
MUST terminate the connection with an "illegal_parameter" alert.</t>

<t><xref target="fig-key-update"/> showns the interaction graphically.
First, support for the functionality in this specification
is negotiated in the ClientHello and the EncryptedExtensions
messages. Then, the ExtendedKeyUpdate message is sent to
update the application traffic secrets.</t>

<figure title="Extended Key Update Message Exchange." anchor="fig-key-update"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share
     | + signature_algorithms
     v + Extended_Key_Update       -------->
                                                  ServerHello  ^ Key
                                                  + key_share  | Exch
                                                               v
                                        {EncryptedExtensions   ^ Server
                                       + Extended_Key_Update}  | Params
                                         {CertificateRequest}  v
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v
                               <--------           
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]
                                  ...
       [ExtendedKeyUpdate]     -------->
                               <--------  [ExtendedKeyUpdate]
                                  ...
       [ExtendedKeyUpdate]     <-------
                               -------->  [ExtendedKeyUpdate]
                                  ...
       [Application Data]      <------->  [Application Data]
]]></artwork></figure>

<t>The structure of the ExtendedKeyUpdate message is shown below.
The sender starts the key update process and the receiver responds
with its key share. The extended key update always consists of two
messages, one from the sender to the receiver and another one from
the receiver to the sender. Both messages use the same format but the
response message MUST NOT have the request_update set to update_requested(1).</t>

<t>The structures for KeyUpdateRequest and KeyShareEntry are defined in
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<figure><artwork><![CDATA[
enum {
    update_not_requested(0), update_requested(1), (255)
} KeyUpdateRequest;

struct {
    KeyUpdateRequest request_update;
    KeyShareEntry key_share;
} ExtendedKeyUpdate;
]]></artwork></figure>

<t>If the request_update field is set to "update_requested", then the
receiver MUST send an ExtendedKeyUpdate of its own with request_update set to
"update_not_requested" prior to sending its next Application Data
record.  This mechanism allows either side to force an update to the
entire connection, but causes an implementation which receives
multiple ExtendedKeyUpdate while it is silent to respond with a single
update.  Note that implementations may receive an arbitrary number of
messages between sending a ExtendedKeyUpdate with request_update set to
"update_requested" and receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight.  However, because send and receive
keys are derived from independent traffic secrets, retaining the
receive traffic secret does not threaten the forward secrecy of data
sent before the sender changed keys.</t>

<t>Note: Implementations may receive an arbitrary number of
messages between one peer sending a ExtendedKeyUpdate and this peer
receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight. This design aspect needs to be
taken into account when designing APIs that inform applications
using this extended key update procedure to guarantee perfect
forward security.</t>

<t>If implementations independently send their own ExtendedKeyUpdate
messages, and they cross in flight, the result is that each
side increments keys by two generations.</t>

<t>Both sender and receiver MUST encrypt their ExtendedKeyUpdate messages with
the old keys. Both sides MUST enforce that a ExtendedKeyUpdate messages
with the old key is received before accepting any messages encrypted
with the new key. Failure to do so may allow message truncation
attacks.</t>

<t>If a sending
implementation receives a ExtendedKeyUpdate with request_update set to
"update_requested", it MUST NOT send its own ExtendedKeyUpdate if that would
cause it to exceed these limits.  This may result in an eventual need to
terminate the connection when the limits in Section 5.5 of
<xref target="I-D.ietf-tls-rfc8446bis"/> are reached.</t>

<t>The ExtendedKeyUpdate and the KeyUpdates MAY be used in combination,
depending on the desired security properties.</t>

</section>
<section anchor="dtls-13-specific-considerations"><name>DTLS 1.3-specific Considerations</name>

<t>DTLS 1.3 <xref target="RFC9147"/> requires the transmission of an ACK message to ensure
the reliable transmission of the KeyUpdate message. Since the design
of the ExtendedKeyUpdate message always requires a full roundtrip
there is no need for a dedicated ACK message.</t>

<t><xref target="fig-key-update-dtls"/> illustrates an example exchange of the
ExtendedKeyUpdate message used to update traffic secrets in
both directions in a DTLS 1.3 exchange.</t>

<figure title="DTLS 1.3 Extended Key Update Example." anchor="fig-key-update-dtls"><artwork><![CDATA[
   Client                                             Server

         /-------------------------------------------\
        |             Initial Handshake               |
         \-------------------------------------------/

    [Application Data]         ========>
    (epoch=3)

                               <========      [Application Data]
                                                       (epoch=3)

         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/

    [ExtendedKeyUpdate]
    (epoch 3)                  -------->


                               <========      [Application Data]
                                                       (epoch=3)

                                             [ExtendedKeyUpdate]
                               <--------               (epoch=3)

 /----------------------------\
|   Key Update (based on DH)   |
 \----------------------------/

    [Application Data]
    (epoch=4)                  ========>

                               <--------     [ExtendedKeyUpdate]
                                                       (epoch=3)

    [ExtendedKeyUpdate]        -------->
    (epoch=4)

                                /----------------------------\
                               |   Key Update (based on DH)   |
                                \----------------------------/

                               <========      [Application Data]
                                                       (epoch=4)
]]></artwork></figure>

<t>In order to facilitate epoch reconstruction in DTLS 1.3 (see
Section 4.2.2 of <xref target="RFC9147"/>), implementations MUST NOT send records
with the new keys or send a new ExtendedKeyUpdate messages until the
previous key update has been completed. This avoids having
too many epochs in active use.</t>

<t>Due to loss and/or reordering, DTLS 1.3 implementations may receive a
record with an older epoch than the current one (the requirements
above preclude receiving a newer record).  They SHOULD attempt to
process those records with that epoch (see Section 4.2.2 of <xref target="RFC9147"/>
for information on determining the correct epoch) but MAY opt to discard
such out-of-epoch records.</t>

<t>Due to the possibility of a response message of an initial ExtendedKeyUpdate
being lost and thereby preventing the sender of the ExtendedKeyUpdate from
updating its keying material, receivers MUST retain the pre-update keying material
until receipt and successful decryption of a message using the new
keys.</t>

</section>
</section>
<section anchor="key_update"><name>Updating Traffic Secrets</name>

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the ExtendedKeyUpdate handshake
message. The next generation of traffic keys is
computed by generating client_/server_application_traffic_secret_N+1
from client_/server_application_traffic_secret_N as described in this
section and then re-deriving the traffic keys, as described in
Section 7.3 of <xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>There are three changes to the application_traffic_secret computation
described in <xref target="I-D.ietf-tls-rfc8446bis"/>, namely</t>

<t><list style="symbols">
  <t>The application_traffic_secret_N is not used as an secret as it
may be already exfiltrated by the attacker.</t>
  <t>the label is adjusted to distinguish it from the classic KeyUpdate
message, and</t>
  <t>the Diffie-Hellman derived shared secret, as 'dh-secret', is used
as input to the HKDF-Expand-Label() function to produce the value sk.
sk is subsequently included as a secret value in the computation of
the application_traffic_secret_N+1, making the next generation
traffic key of the application traffic secret dependent on the
DH-derived value.</t>
</list></t>

<t>The next-generation application_traffic_secret is computed as follows:</t>

<figure><artwork><![CDATA[
sk = HKDF-Extract(0, dh-secret)

application_traffic_secret_N+1 =
    Derive-Secret(sk,"traffic upd 2",
                  application_traffic_secret_N)
]]></artwork></figure>

<t>The next generation of traffic keys is computed using the HKDF, as defined in <xref target="RFC5869"/>, and</t>

<t>its two components, HKDF-Extract and HKDF-Expand, as recommended in Appendix</t>

<t>F.1.1 of <xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>Once client_/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated
traffic keys.</t>

<t>If a hybrid key exchange, based on <xref target="I-D.ietf-tls-hybrid-design"/>, is used then the two shared</t>

<t>secrets concatenated together serve as input to</t>

<t>the HKDF-Extract function to produce the value sk.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t><xref target="RFC9325"/> provides a good summary of what (perfect) forward secrecy
is and how it relates to the TLS protocol. In summary, it says:</t>

<t>"Forward secrecy (also called "perfect forward secrecy" or "PFS") is a
defense against an attacker who records encrypted conversations where
the session keys are only encrypted with the communicating parties'
long-term keys. Should the attacker be able to obtain these long-term
keys at some point later in time, the session keys and thus the entire
conversation could be decrypted."</t>

<t>Appendix F of <xref target="I-D.ietf-tls-rfc8446bis"/> goes into details of
explaining the security properties of the TLS 1.3 protocol and notes
"... forward secrecy without rerunning (EC)DHE does not stop an attacker
from doing static key exfiltration." It concludes with a recommendation
by saying: "Frequently rerunning (EC)DHE forces an attacker to do dynamic
key exfiltration (or content exfiltration)." (The term key exfiltration
is defined in <xref target="RFC7624"/>.)</t>

<t>This specification re-uses public key encryption to update application
traffic secrets in both direction. Unlike the classic Key Update message
defined in  <xref target="I-D.ietf-tls-rfc8446bis"/>, the key update procedure requires
to messages.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is requested to add the following value to the
"TLS Flags" extension defined in <xref target="I-D.ietf-tls-tlsflags"/></t>

<t><list style="symbols">
  <t>Value: TBD1</t>
  <t>Flag Name: extended_key_update</t>
  <t>Messages: CH, EE</t>
  <t>Recommended: Y</t>
  <t>Reference: [This document]</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>


<reference anchor="I-D.ietf-tls-rfc8446bis">
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
         <organization>Windy Hill Systems, LLC</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This document specifies version 1.3 of the Transport Layer Security
   (TLS) protocol.  TLS allows client/server applications to communicate
   over the Internet in a way that is designed to prevent eavesdropping,
   tampering, and message forgery.

   This document updates RFCs 5705, 6066, 7627, and 8422 and obsoletes
   RFCs 5077, 5246, 6961, and 8446.  This document also specifies new
   requirements for TLS 1.2 implementations.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-rfc8446bis-09"/>
   
</reference>


<reference anchor="I-D.ietf-tls-tlsflags">
   <front>
      <title>A Flags Extension for TLS 1.3</title>
      <author fullname="Yoav Nir" initials="Y." surname="Nir">
         <organization>Dell Technologies</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   A number of extensions are proposed in the TLS working group that
   carry no interesting information except the 1-bit indication that a
   certain optional feature is supported.  Such extensions take 4 octets
   each.  This document defines a flags extension that can provide such
   indications at an average marginal cost of 1 bit each.  More
   precisely, it provides as many flag extensions as needed at 4 + the
   order of the last set bit divided by 8.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-tlsflags-12"/>
   
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>

<reference anchor="RFC5869">
  <front>
    <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
    <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
    <author fullname="P. Eronen" initials="P." surname="Eronen"/>
    <date month="May" year="2010"/>
    <abstract>
      <t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5869"/>
  <seriesInfo name="DOI" value="10.17487/RFC5869"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC9325">
  <front>
    <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
    <author fullname="Y. Sheffer" initials="Y." surname="Sheffer"/>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="T. Fossati" initials="T." surname="Fossati"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are used to protect data exchanged over a wide range of application protocols and can also form the basis for secure transport protocols. Over the years, the industry has witnessed several serious attacks on TLS and DTLS, including attacks on the most commonly used cipher suites and their modes of operation. This document provides the latest recommendations for ensuring the security of deployed services that use TLS and DTLS. These recommendations are applicable to the majority of use cases.</t>
      <t>RFC 7525, an earlier version of the TLS recommendations, was published when the industry was transitioning to TLS 1.2. Years later, this transition is largely complete, and TLS 1.3 is widely available. This document updates the guidance given the new environment and obsoletes RFC 7525. In addition, this document updates RFCs 5288 and 6066 in view of recent attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="195"/>
  <seriesInfo name="RFC" value="9325"/>
  <seriesInfo name="DOI" value="10.17487/RFC9325"/>
</reference>

<reference anchor="RFC7624">
  <front>
    <title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="B. Schneier" initials="B." surname="Schneier"/>
    <author fullname="C. Jennings" initials="C." surname="Jennings"/>
    <author fullname="T. Hardie" initials="T." surname="Hardie"/>
    <author fullname="B. Trammell" initials="B." surname="Trammell"/>
    <author fullname="C. Huitema" initials="C." surname="Huitema"/>
    <author fullname="D. Borkmann" initials="D." surname="Borkmann"/>
    <date month="August" year="2015"/>
    <abstract>
      <t>Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered. In this document, we develop a threat model that describes these attacks on Internet confidentiality. We assume an attacker that is interested in undetected, indiscriminate eavesdropping. The threat model is based on published, verified attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7624"/>
  <seriesInfo name="DOI" value="10.17487/RFC7624"/>
</reference>


<reference anchor="I-D.ietf-tls-hybrid-design">
   <front>
      <title>Hybrid key exchange in TLS 1.3</title>
      <author fullname="Douglas Stebila" initials="D." surname="Stebila">
         <organization>University of Waterloo</organization>
      </author>
      <author fullname="Scott Fluhrer" initials="S." surname="Fluhrer">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Shay Gueron" initials="S." surname="Gueron">
         <organization>University of Haifa</organization>
      </author>
      <date day="7" month="September" year="2023"/>
      <abstract>
	 <t>   Hybrid key exchange refers to using multiple key exchange algorithms
   simultaneously and combining the result with the goal of providing
   security even if all but one of the component algorithms is broken.
   It is motivated by transition to post-quantum cryptography.  This
   document provides a construction for hybrid key exchange in the
   Transport Layer Security (TLS) protocol version 1.3.

   Discussion of this work is encouraged to happen on the TLS IETF
   mailing list tls@ietf.org or on the GitHub repository which contains
   the draft: https://github.com/dstebila/draft-ietf-tls-hybrid-design.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-hybrid-design-09"/>
   
</reference>


<reference anchor="ANSSI-DAT-NT-003" target="https://www.ssi.gouv.fr/uploads/2015/09/NT_IPsec_EN.pdf">
  <front>
    <title>Recommendations for securing networks with IPsec, Technical Report</title>
    <author >
      <organization>ANSSI</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>
<reference anchor="TLS-Ext-Registry" target="https://www.iana.org/assignments/tls-extensiontype-values">
  <front>
    <title>Transport Layer Security (TLS) Extensions</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="November"/>
  </front>
</reference>


    </references>


<?line 449?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the members of the "TSVWG DTLS for SCTP
Requirements Design Team" for their discussion. The members, in
no particular order, are:</t>

<t><list style="symbols">
  <t>Marcelo Ricardo Leitner</t>
  <t>Zaheduzzaman Sarker</t>
  <t>Magnus Westerlund</t>
  <t>John Mattsson</t>
  <t>Claudio Porfiri</t>
  <t>Xin Long</t>
  <t>Michael Tuxen</t>
  <t>Hannes Tschofenig</t>
  <t>K Tirumaleswar Reddy</t>
  <t>Bertrand Rault</t>
</list></t>

<t>Additionally, we would like to thank the chairs of the
Transport and Services Working Group (tsvwg) Gorry Fairhurst and
Marten Seemann as well as the responsible area director Martin Duke.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA81c+3MbN5L+nVX8H1DMD5E2JG0rdrJRNqlVLCnSxVZ8Fh1f
bjdRgTMgidNwhjeYEc04zt9+X3cD8+DLsjdbdaw8qHkAjX5+3WhwMBh0O4Ut
EnOszt4UJo1NrH4wK/VqEevCqEmWq1GuU7fI8kI90yuTq2sTlbktVupg9Oz6
UD0aft7tdDt6PM7N3Z5Rnl13O3EWpXqOueJcT4pB4aJZNjGpnQ6KxA2Mf3Vw
a1aDkl8dPHzY7UT4Ms3y1bFyRUxz2UV+rIq8dMXRw4dfPTzC7LnRxxVl3c4y
y2+neVYujmVijIhL8bG6TAuTp6YYnBIFNJgrdBrf6CRLQdfKuG5nYY+7HaXy
SWRiV6yScF2pIoua3y2oTYvqigOPcjNx9YXVvP13kduofj7K5nO8X9+3aWLT
xmxgyCCxrhhgoHGW4MFB9pfP6BYYOdeLhU2n/mldFrMsJ7oHdJ8+NsULF0M1
qrgc7ogMLnSaGrfltplrmxyrGd8f1kL6+3T+ZgjeheeyfLo54XNMWJo3Jm1P
9txGM22StXt+poIv/n0yG8xLkzpIaBib5izqub+uXqX2bqiyiTpZLBILNbuO
rEkjZlibkNFQvTRxvGrTMbJ5OdeJcUudt+97Wm6zNC5sjrXizyFE1KLjKru1
WinSmzTL57qwd4aV5eX506NHj77i75eD06E1xYSVGlr018ePvxhbt3kP/04S
PXVhhK8ePf4yfH/y1y9oNJtO1uf56vOjJ+H7l18cPd4cd7Ya5zYexMbZacq3
T66ur/HIyWhwNYJNfX7sV1WrjWqskp/217xzeGlEW2GUNksdm7Rjc0unCjpB
BufU0hYzdfkCN/pqZKJZaiOd4F3yHmE8nU8NbGBWFAt3/ODBcrkcOmeH06y8
G07yB+UiyXTsHhw9fPTkwcOvHlyNbnjAm7Or4SKe+FHIN4DOcgofoOhRug5L
H8D9DF6aKYwG/mLvIi9Prk7aa3yPo2PP5mj1e5ZidaqHGP+BdsR8tu8HlXOj
t4vVwgzudFIa11rMVXZn5mNMe/TwiD3qYDBQeoyF6Igd1Whm7uGLlVuYyE7A
eBIULGVicqe0gl+lawYOdG6c01MDD6bEy6ooXy2KbJrrxcxGCs7SqVhEW2DS
xE5MYeeGzE5jyHSa0S2HYTDFsNu5LJROkmzp+HFHTjyn0RcmJ+2ll/xEGIEe
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
oMMxTAAA

-->

</rfc>

