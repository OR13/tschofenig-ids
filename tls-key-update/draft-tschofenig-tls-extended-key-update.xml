<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-tls-extended-key-update-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Extended Key Update for TLS">Extended Key Update for Transport Layer Security (TLS) 1.3</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="M." surname="Tuexen" fullname="Michael Tuexen">
      <organization>Muenster Univ. of Applied Sciences</organization>
      <address>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>

    <date year="2023" month="November" day="24"/>

    <area>Security</area>
    <workgroup>TLS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 58?>

<t>The Transport Layer Security (TLS) 1.3 specification offers a dedicated
message to update cryptographic keys during the lifetime of an ongoing session.
It allows the sender to perform an update of the key and initialization vector
and may trigger the recipient, via the request_update field, to transmit a
key update message in the reverse direction.</t>

<t>In environments where sessions are long-lived, such as industrial IoT or
telecommunication networks, this key update along is insufficient since
perfect forward secrecy is not offered via this mechanism. Earlier versions
of TLS allowed the two peers to perform renegotiation, which is a handshake
that establishes new cryptographic parameters for an existing session.
When a security vulnerability with the renegotiation mechanism was discovered,
RFC 5746 was standardized as a fix. Renegotiation has, however, been removed
from TLS 1.3.</t>

<t>This specification defines an extended key update message that supports
perfect forward secrecy using a Diffie-Hellman key exchange.</t>



    </abstract>



  </front>

  <middle>


<?line 78?>

<section anchor="introduction"><name>Introduction</name>

<t>The features of TLS and DTLS have changed over the years and while newer versions
optimized and enhanced features (often with the help of extensions) some functionality
was removed without replacement. The ability to update keys and initialization vectors
with forward secrecy has been added in TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> using the
KeyUpdate message and it intended to (partially) replace renegotiation from earlier
TLS versions. The renegotiation feature, while complex, offered additional
functionality that is not supported with TLS 1.3 anymore, including the update
keys with a Diffie-Hellman exchange during the lifetime of a session.</t>

<t>While such a feature is less relevant in environments with shorter-lived sessions,
such as transactions on the web, there are uses of TLS and DTLS where long-lived
sessions are common. In those environments, such as industrial IoT and
telecommunication networks, availability is important and an interruption of the
communication due to periodic session resumptions is not an option.</t>

<t>Some deployments have used IPsec in the past and have now decided to switch to TLS
or DTLS instead and the requirement for updates of cryptographic keys for an existing
session has become a requirement. For IPsec, NIST, BSI, and ANSSI recommends very frequent
re-run of Diffie-Hellman to provide forward secrecy and force attackers to perform a
dynamic key extraction <xref target="RFC7624"/>. ANSSI writes "It is recommended to force the periodic
renewal of the keys, e.g., every hour and every 100 GB of data, in order to limit the
impact of a key compromise." <xref target="ANSSI-DAT-NT-003"/>.</t>

<t>This specification defines a new, extended key update message supporting perfect
forward secrecy. It does so by utilizing a Diffie-Hellman exchange using one of the
groups negotiated during the initial exchange. The support for this extension is
signaled using the TLS flags extension mechanism.</t>

<t>This specification is applicable to both TLS 1.3 <xref target="I-D.ietf-tls-rfc8446bis"/> and
DTLS 1.3 <xref target="RFC9147"/>. Throughout the specification we do not distinguish between
these two protocols unless necessary for better understanding.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>To distinguish the key update procedure defined in <xref target="I-D.ietf-tls-rfc8446bis"/>
from the key update procedure specified in this document, we use the terms
"classic key update" and "extended key update", respectively.</t>

</section>
<section anchor="extensions"><name>Extensions</name>

<t>Client and servers use the TLS flags extension <xref target="I-D.ietf-tls-tlsflags"/>
to indicate support for the functionality defined in this document. We
call this the "extended_key_update" extension and the corresponding
flag is called "Extended_Key_Update" flag.</t>

<t>The "Extended_Key_Update" flag proposed by the client in the ClientHello
(CH) MUST be acknowledged in the EncryptedExtensions (EE), if the
server also supports the functionality defined in this document and
is configured to use it.</t>

<t>If the "Extended_Key_Update" flag is not set, servers
ignore any the functionality specified in this document and applications
have to rely on the features offered by the TLS 1.3-specified KeyUpdate
instead.</t>

</section>
<section anchor="extended-key-update"><name>Extended Key Update</name>

<section anchor="generic-considerations"><name>Generic Considerations</name>

<t>The ExtendedKeyUpdate handshake message is used to indicate an update
of cryptographic keys. This key update process can be sent by either
peer after it has sent a Finished message.  Implementations that
receive a ExtendedKeyUpdate message prior to receiving a Finished
message MUST terminate the connection with an "unexpected_message"
alert.</t>

<t>The design of the ExtendedKeyUpdate message follows the design of
the classic KeyUpdate message. Both allow the update of keys in
one direction only. However, the ExtendedKeyUpdate message requires
a full-roundtrip due to the nature of the Diffie-Hellman exchange.</t>

<t><xref target="fig-key-update"/> showns the interaction graphically.
First, support for the functionality in this specification
is negotiated in the ClientHello and the EncryptedExtensions
messages. Then, the ExtendedKeyUpdate message is sent to
update the application traffic secrets.</t>

<figure title="Extended Key Update Message Exchange." anchor="fig-key-update"><artwork><![CDATA[
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share
     | + signature_algorithms
     v + Extended_Key_Update       -------->
                                                  ServerHello  ^ Key
                                                  + key_share  | Exch
                                                               v
                                        {EncryptedExtensions   ^ Server
                                       + Extended_Key_Update}  | Params
                                         {CertificateRequest}  v
                                                {Certificate}  ^
                                          {CertificateVerify}  | Auth
                                                   {Finished}  v
                               <--------           
     ^ {Certificate}
Auth | {CertificateVerify}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]
                                  ...
       [ExtendedKeyUpdate]     -------->
                               <--------  [ExtendedKeyUpdate]
                                  ...
       [ExtendedKeyUpdate]     <-------
                               -------->  [ExtendedKeyUpdate]
                                  ...
       [Application Data]      <------->  [Application Data]
]]></artwork></figure>

<t>The structure of the ExtendedKeyUpdate message is shown below.
The sender starts the key update process and the receiver responds
with its key share. The extended key update always consists of two
messages, one from the sender to the receiver and another one from
the receiver to the sender. Both messages use the same format but the
response message MUST NOT have the request_update set to update_requested(1).</t>

<t>The structures for KeyUpdateRequest and KeyShareEntry are defined in
<xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<figure><artwork><![CDATA[
enum {
    update_not_requested(0), update_requested(1), (255)
} ;

struct {
    KeyUpdateRequest request_update;
    KeyShareEntry key_share;
} ExtendedKeyUpdate;
]]></artwork></figure>

<t>If the request_update field is set to "update_requested", then the
receiver MUST send an ExtendedKeyUpdate of its own with request_update set to
"update_not_requested" prior to sending its next Application Data
record.  This mechanism allows either side to force an update to the
entire connection, but causes an implementation which receives
multiple ExtendedKeyUpdate while it is silent to respond with a single
update.  Note that implementations may receive an arbitrary number of
messages between sending a ExtendedKeyUpdate with request_update set to
"update_requested" and receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight.  However, because send and receive
keys are derived from independent traffic secrets, retaining the
receive traffic secret does not threaten the forward secrecy of data
sent before the sender changed keys.</t>

<t>Note: Implementations may receive an arbitrary number of
messages between one peer sending a ExtendedKeyUpdate and this peer
receiving the peer's ExtendedKeyUpdate, because those
messages may already be in flight. This design aspect needs to be
taken into account when designing APIs that inform applications
using this extended key update procedure to guarantee perfect
forward security.</t>

<t>If implementations independently send their own ExtendedKeyUpdate
messages, and they cross in flight, the result is that each
side increments keys by two generations.</t>

<t>Both sender and receiver MUST encrypt their ExtendedKeyUpdate messages with
the old keys. Both sides MUST enforce that a ExtendedKeyUpdate messages
with the old key is received before accepting any messages encrypted
with the new key. Failure to do so may allow message truncation
attacks.</t>

<t>With a 128-bit key as in AES-128, rekeying 2^64 times has a high
probability of key reuse within a given connection.  Note that even
if the key repeats, the IV is also independently generated, so the
chance of a joint key/IV collision is much lower.  In order to
provide an extra margin of security, sending implementations MUST NOT
allow the epoch -- and hence the number of key updates -- to exceed
2^48-1.  In order to allow this value to be changed later -- for
instance for ciphers with more than 128-bit keys -- receiving
implementations MUST NOT enforce this rule.  If a sending
implementation receives a ExtendedKeyUpdate with request_update set to
"update_requested", it MUST NOT send its own ExtendedKeyUpdate if that would
cause it to exceed these limits.  This may result in an eventual need to
terminate the connection when the limits in Section 5.5 of
<xref target="I-D.ietf-tls-rfc8446bis"/> are reached.</t>

<t>The ExtendedKeyUpdate and the KeyUpdates MAY be used in combination,
depending on the desired security properties.</t>

</section>
<section anchor="dtls-13-specific-considerations"><name>DTLS 1.3-specific Considerations</name>

<t>DTLS 1.3 <xref target="RFC9147"/> requires the transmission of an ACK message to ensure
the reliable transmission of the KeyUpdate message. Since the design
of the ExtendedKeyUpdate message always requires a full roundtrip
there is no need for a dedicated ACK message.</t>

<t><xref target="fig-key-update-dtls"/> illustrates an example exchange of the
ExtendedKeyUpdate message used to update traffic secrets in
both directions in a DTLS 1.3 exchange.</t>

<figure title="DTLS 1.3 Extended Key Update Example." anchor="fig-key-update-dtls"><artwork><![CDATA[
   Client                                             Server

         /-------------------------------------------\
        |             Initial Handshake               |
         \-------------------------------------------/

    [Application Data]         ========>
    (epoch=3)

                               <========      [Application Data]
                                                       (epoch=3)

         /-------------------------------------------\
        |              Some time later ...            |
         \-------------------------------------------/

    [ExtendedKeyUpdate]
    (epoch 3)                  -------->


                               <========      [Application Data]
                                                       (epoch=3)

                                             [ExtendedKeyUpdate]
                               <--------               (epoch=3)

 /----------------------------\
|   Key Update (based on DH)   |
 \----------------------------/

    [Application Data]
    (epoch=4)                  ========>

                               <--------     [ExtendedKeyUpdate]
                                                       (epoch=3)

    [ExtendedKeyUpdate]        -------->
    (epoch=4)

                                /----------------------------\
                               |   Key Update (based on DH)   |
                                \----------------------------/

                               <========      [Application Data]
                                                       (epoch=4)
]]></artwork></figure>

<t>In order to facilitate epoch reconstruction in DTLS 1.3 (see
Section 4.2.2 of <xref target="RFC9147"/>), implementations MUST NOT send records
with the new keys or send a new ExtendedKeyUpdate messages until the
previous key update has been completed. This avoids having
too many epochs in active use.</t>

<t>Due to loss and/or reordering, DTLS 1.3 implementations may receive a
record with an older epoch than the current one (the requirements
above preclude receiving a newer record).  They SHOULD attempt to
process those records with that epoch (see Section 4.2.2 of <xref target="RFC9147"/>
for information on determining the correct epoch) but MAY opt to discard
such out-of-epoch records.</t>

<t>Due to the possibility of a response message of an initial ExtendedKeyUpdate
being lost and thereby preventing the sender of the ExtendedKeyUpdate from
updating its keying material, receivers MUST retain the pre-update keying material
until receipt and successful decryption of a message using the new
keys.</t>

</section>
</section>
<section anchor="key_update"><name>Updating Traffic Secrets</name>

<t>Once the handshake is complete, it is possible for either side to
update its sending traffic keys using the ExtendedKeyUpdate handshake
message. The next generation of traffic keys is
computed by generating client_/server_application_traffic_secret_N+1
from client_/server_application_traffic_secret_N as described in this
section and then re-deriving the traffic keys, as described in
Section 7.3 of <xref target="I-D.ietf-tls-rfc8446bis"/>.</t>

<t>There are two changes to the application_traffic_secret computation
described in <xref target="I-D.ietf-tls-rfc8446bis"/>, namely</t>

<t><list style="symbols">
  <t>the label is adjusted to distinguish it from the classic KeyUpdate
message, and</t>
  <t>the Diffie-Hellman derived shared secret, as 'dh-secret', is used
as input to the HKDF-Expand-Label() function to produce the value sk.
sk is subsequently included as a context value in the computation of
the application_traffic_secret calculation making the key next
generation of the application traffic secret dependent on the previous
application traffic secret and the DH-derived value.</t>
</list></t>

<t>The next-generation application_traffic_secret is computed as follows:</t>

<figure><artwork><![CDATA[
sk = HKDF-Expand-Label(dh-secret, "DH-derived key", "", Hash.length)

application_traffic_secret_N+1 =
    HKDF-Expand-Label(application_traffic_secret_N,
                      "traffic upd 2", sk, Hash.length)
]]></artwork></figure>

<t>Once client_/server_application_traffic_secret_N+1 and its associated
traffic keys have been computed, implementations SHOULD delete
client_/server_application_traffic_secret_N and its associated
traffic keys.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t><xref target="RFC9325"/> provides a good summary of what (perfect) forward secrecy
is and how it relates to the TLS protocol. In summary, it says:</t>

<t>"Forward secrecy (also called "perfect forward secrecy" or "PFS") is a
defense against an attacker who records encrypted conversations where
the session keys are only encrypted with the communicating parties'
long-term keys. Should the attacker be able to obtain these long-term
keys at some point later in time, the session keys and thus the entire
conversation could be decrypted."</t>

<t>Appendix F of <xref target="I-D.ietf-tls-rfc8446bis"/> goes into details of
explaining the security properties of the TLS 1.3 protocol and notes
"... forward secrecy without rerunning (EC)DHE does not stop an attacker
from doing static key exfiltration." It concludes with a recommendation
by saying: "Frequently rerunning (EC)DHE forces an attacker to do dynamic
key exfiltration (or content exfiltration)." (The term key exfiltration
is defined in <xref target="RFC7624"/>.)</t>

<t>This specification re-uses public key encryption to update application
traffic secrets in both direction. Unlike the classic Key Update message
defined in  <xref target="I-D.ietf-tls-rfc8446bis"/>, the key update procedure requires
to messages.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA is requested to add the following value to the
"TLS Flags" extension defined in <xref target="I-D.ietf-tls-tlsflags"/></t>

<t><list style="symbols">
  <t>Value: TBD1</t>
  <t>Flag Name: extended_key_update</t>
  <t>Messages: CH, EE</t>
  <t>Recommended: Y</t>
  <t>Reference: [This document]</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>


<reference anchor="I-D.ietf-tls-rfc8446bis">
   <front>
      <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
         <organization>Windy Hill Systems, LLC</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This document specifies version 1.3 of the Transport Layer Security
   (TLS) protocol.  TLS allows client/server applications to communicate
   over the Internet in a way that is designed to prevent eavesdropping,
   tampering, and message forgery.

   This document updates RFCs 5705, 6066, 7627, and 8422 and obsoletes
   RFCs 5077, 5246, 6961, and 8446.  This document also specifies new
   requirements for TLS 1.2 implementations.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-rfc8446bis-09"/>
   
</reference>


<reference anchor="I-D.ietf-tls-tlsflags">
   <front>
      <title>A Flags Extension for TLS 1.3</title>
      <author fullname="Yoav Nir" initials="Y." surname="Nir">
         <organization>Dell Technologies</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   A number of extensions are proposed in the TLS working group that
   carry no interesting information except the 1-bit indication that a
   certain optional feature is supported.  Such extensions take 4 octets
   each.  This document defines a flags extension that can provide such
   indications at an average marginal cost of 1 bit each.  More
   precisely, it provides as many flag extensions as needed at 4 + the
   order of the last set bit divided by 8.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-tls-tlsflags-12"/>
   
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC9325">
  <front>
    <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
    <author fullname="Y. Sheffer" initials="Y." surname="Sheffer"/>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="T. Fossati" initials="T." surname="Fossati"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are used to protect data exchanged over a wide range of application protocols and can also form the basis for secure transport protocols. Over the years, the industry has witnessed several serious attacks on TLS and DTLS, including attacks on the most commonly used cipher suites and their modes of operation. This document provides the latest recommendations for ensuring the security of deployed services that use TLS and DTLS. These recommendations are applicable to the majority of use cases.</t>
      <t>RFC 7525, an earlier version of the TLS recommendations, was published when the industry was transitioning to TLS 1.2. Years later, this transition is largely complete, and TLS 1.3 is widely available. This document updates the guidance given the new environment and obsoletes RFC 7525. In addition, this document updates RFCs 5288 and 6066 in view of recent attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="195"/>
  <seriesInfo name="RFC" value="9325"/>
  <seriesInfo name="DOI" value="10.17487/RFC9325"/>
</reference>

<reference anchor="RFC7624">
  <front>
    <title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="B. Schneier" initials="B." surname="Schneier"/>
    <author fullname="C. Jennings" initials="C." surname="Jennings"/>
    <author fullname="T. Hardie" initials="T." surname="Hardie"/>
    <author fullname="B. Trammell" initials="B." surname="Trammell"/>
    <author fullname="C. Huitema" initials="C." surname="Huitema"/>
    <author fullname="D. Borkmann" initials="D." surname="Borkmann"/>
    <date month="August" year="2015"/>
    <abstract>
      <t>Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered. In this document, we develop a threat model that describes these attacks on Internet confidentiality. We assume an attacker that is interested in undetected, indiscriminate eavesdropping. The threat model is based on published, verified attacks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7624"/>
  <seriesInfo name="DOI" value="10.17487/RFC7624"/>
</reference>


<reference anchor="ANSSI-DAT-NT-003" target="https://www.ssi.gouv.fr/uploads/2015/09/NT_IPsec_EN.pdf">
  <front>
    <title>Recommendations for securing networks with IPsec, Technical Report</title>
    <author >
      <organization>ANSSI</organization>
    </author>
    <date year="2015" month="August"/>
  </front>
</reference>
<reference anchor="TLS-Ext-Registry" target="https://www.iana.org/assignments/tls-extensiontype-values">
  <front>
    <title>Transport Layer Security (TLS) Extensions</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="November"/>
  </front>
</reference>


    </references>


<?line 423?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the members of the "TSVWG DTLS for SCTP
Requirements Design Team" for their discussion. The members, in
no particular order, are:</t>

<t><list style="symbols">
  <t>Marcelo Ricardo Leitner</t>
  <t>Zaheduzzaman Sarker</t>
  <t>Magnus Westerlund</t>
  <t>John Mattsson</t>
  <t>Claudio Porfiri</t>
  <t>Xin Long</t>
  <t>Michael Tuxen</t>
  <t>Hannes Tschofenig</t>
  <t>K Tirumaleswar Reddy</t>
  <t>Bertrand Rault</t>
</list></t>

<t>Additionally, we would like to thank the chairs of the
Transport and Services Working Group (tsvwg) Gorry Fairhurst and
Marten Seemann as well as the responsible area director Martin Duke.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

