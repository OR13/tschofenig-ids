<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-cose-cwt-chain-01" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="CWT Chains">CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing Chains of CBOR Web Tokens (CWTs)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2024" month="July" day="06"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 65?>

<t>The CBOR Object Signing and Encryption (COSE) message structure uses
references to keys and defines header parameters to carry chains of X.509
certificates.</t>

<t>This specification extends this functionality to CBOR Web Tokens (CWTs).</t>



    </abstract>



  </front>

  <middle>


<?line 73?>

<section anchor="introduction"><name>Introduction</name>

<t>The CBOR Object Signing and Encryption (COSE) message structure uses
references to keys and defines header parameters to carry chains of X.509
certificates. The header parameters for conveying X.509 certificate chains
in a COSE payload are defined in <xref target="RFC9360"/>.</t>

<t>This document is inspired by RFC 9360 and defines header parameters to
convey chains of CBOR Web Tokens (CWTs) <xref target="RFC8392"/>. The use of chains of
CWTs allows a trust infrastructure established by CWTs to be used with COSE.
The Concise Binary Object Representation (CBOR) key structures <xref target="RFC8949"/>
that have been defined in COSE support the use of X.509 certificates. This
specification applies the well-proven concepts to CWTs. These chains of CWTs
allow path validation similarly to what a X.509 certificate-based Public Key
Infrastructure (PKI) provides. Since <xref target="RFC8747"/> does not define the
semantics of path validation for CWTs, new terminology is introduced.</t>

<t>This document is structured as follows: After introducing some terms, we
describe path validation for CWTs. Then, we define new header parameters.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>The following terms are useful for readers of this document:</t>

<t><list style="symbols">
  <t>End Entity: user of CWT and/or end user system that is the subject of a CWT;</t>
  <t>CA: certification authority; RFC 8747 calls this entity the "issuer" and
describes it as "the party that creates the CWT and binds the claims about
the subject to the proof-of-possession key". In an OAuth-based system,
this entity often corresponds to an authorization server.</t>
  <t>CA CWT: A CWT that is self-issued whereby the same name appears in the
subject and issuer claims.</t>
  <t>RA: registration authority, i.e., an optional system to which
a CA delegates certain management functions; while often used in PKI
deployments it is a role that has not found usage in systems using CWTs.</t>
  <t>CRL issuer: a system that generates and signs Certificate Revocation
Lists (CRLs); The term CRL is used generically to also refer to status
lists <xref target="I-D.ietf-oauth-status-list"/>.</t>
  <t>repository: a system or collection of distributed systems that stores
CWTs and CRLs and serves as a means of distributing these CWTs and CRLs
to end entities. These repositories may be append-only databases, in the
style of <xref target="I-D.mcmillion-keytrans-architecture"/>.</t>
  <t>Trust Anchor:  As defined in <xref target="RFC6024"/> and <xref target="RFC9019"/>, a Trust Anchor
"represents an authoritative entity via a public key and associated data.
The public key is used to verify digital signatures, and the associated
data is used to constrain the types of information for which the trust
anchor is authoritative." The trust anchor may be a CWT, a raw public key,
or other structure, as appropriate.</t>
  <t>Subject Public Key (Info): The "confirmation" claim, defined in <xref target="RFC8747"/>,
used to carry the public key and the algorithm with which the key is used.</t>
</list></t>

</section>
<section anchor="cwt-path-validation"><name>CWT Path Validation</name>

<t>The goal of path validation is to verify the binding between a subject
name and the public key, as represented in the target CWT, based
on the public key of the trust anchor. In most cases, the target
CWT will be an end entity CWT. Verifying the binding between the name and
subject public key requires obtaining a sequence of certificates that
support that binding. For path validation to work CWTs that have a
minimum number of claims, namely:</t>

<t><list style="symbols">
  <t>Subject</t>
  <t>Issuer</t>
  <t>Confirmation</t>
</list></t>

<t>Valid paths begin with CWTs issued by a trust anchor and the trust anchor
is an input to the algorithm. The algorithm in Section 6 of <xref target="RFC5280"/>
requires the public key of the CA, the CA's name, and any constraints upon
the set of paths that may be validated using this key.</t>

<t>The path validation algorithm verifies that a prospective certification
path (a sequence of n CWTs) satisfies the following conditions:</t>

<t>(a)  for all x in {1, ..., n-1}, the subject of CWT x is the issuer of CWT x+1;</t>

<t>(b)  CWT 1 is issued by the trust anchor;</t>

<t>(c)  CWT n is the CWT to be validated (i.e., the target CWT); and</t>

<t>Note:  When the trust anchor is provided in the form of a self-signed CWT,
this self-signed CWT is not included as part of the prospective certification path.</t>

<t>As a variation to the algorithm presented in Section 6 of <xref target="RFC5280"/>, there
is no strict requirement for a CWT being valid in terms of its lifetime (as
indicated by the "Expiration Time" and the "Not Before" claims) since CWTs
may not necessarily carry these claims and validatity may be determined via
different means, which are outside the scope of this algorithm.</t>

<t>Path validation is an important part of establishing trust in a CWT and
when applying path validation, as defined in Section 6 of<xref target="RFC5280"/>, to
CWTs the reader needs to treat them as certificates. It is important to keep
in mind that many of the advanced features available with an X.509 certificate-based
PKI are, at the time of writing, not available with CWTs. The authors do,
however, believe that differences will decrease over time as CWT-based deployments
scale.</t>

</section>
<section anchor="cwt-cose-header-parameters"><name>CWT COSE Header Parameters</name>

<t>Parties that intend to rely on the assertions made by a CWTs
obtained from any of these methods still need to validate it.  This
validation can be done according to the PKIX rules specified in
<xref target="RFC5280"/> or by using a different trust structure, such as a trusted
distributor for self-signed CWTs.  The PKIX
validation includes matching against the trust anchors configured for
the application.  These rules apply when the validation succeeds in a
single step as well as when CWT chains need to be built.  If
the application cannot establish trust in the CWT, the public
key contained in the CWT cannot be used for cryptographic
operations.</t>

<t>The header parameters defined in this document are as follows:</t>

<t>cwt-bag:  This header parameter contains a bag of CWTs, which is unordered and
    may contain self-signed CWTs.  Note that there could be
    duplicate CWTs.  The CWT bag can contain
    CWT that are completely extraneous to the message.  (An
    example of this would be where a signed message is being used to
    transport a CWT containing a key agreement key.)  As the
    CWT are unordered, the party evaluating the signature
    will need to be capable of building the CWT path as
    necessary.  That party will also have to take into account that
    the bag may not contain the full set of CWT needed to
    build any particular chain.</t>

<figure><artwork><![CDATA[
The trust mechanism MUST process any CWT in this
parameter as untrusted input.  The presence of a self-signed
CWT in the parameter MUST NOT cause the update of the set
of trust anchors without some out-of-band confirmation.  As the
contents of this header parameter are untrusted input, the header
parameter can be in either the protected or unprotected header
bucket.  Sending the header parameter in the unprotected header
bucket allows an intermediary to remove or add CWT.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the header parameter in
the protected header, sending an 'cwt-bag' in the unprotected header
combined with an 'cwt-t' in the protected header, or including the
end entity CWT in the external_aad.

This header parameter allows for a single CWT or a
bag of CWT to be carried in the message.

*  If a single CWT is conveyed, it is placed in a CBOR
    byte string.

*  If multiple CWTs are conveyed, a CBOR array of byte
    strings is used, with each CWT being in its own byte
    string.
]]></artwork></figure>

<t>cwt-chain:  This header parameter contains an ordered array of CWTs.
    The CWTs are to be ordered starting with
    the CWT containing the end entity key followed by the
    CWT that signed it, and so on.  There is no requirement
    for the entire chain to be present in the element if there is
    reason to believe that the relying party already has, or can
    locate, the missing CWT.  This means that the relying
    party is still required to do path building but that a candidate
    path is proposed in this header parameter.</t>

<figure><artwork><![CDATA[
The trust mechanism MUST process any CWT in this
parameter as untrusted input.  The presence of a self-signed
CWT in the parameter MUST NOT cause the update of the set
of trust anchors without some out-of-band confirmation.  As the
contents of this header parameter are untrusted input, the header
parameter can be in either the protected or unprotected header
bucket.  Sending the header parameter in the unprotected header
bucket allows an intermediary to remove or add CWT.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the header parameter in
the protected header, sending an 'cwt-chain' in the unprotected
header combined with an 'cwt-t' in the protected header, or
including the end entity CWT in the external_aad.

This header parameter allows for a single CWT or a
chain of CWTs to be carried in the message.

*  If a single CWT is conveyed, it is placed in a CBOR
    byte string.

*  If multiple CWTs are conveyed, a CBOR array of byte
    strings is used, with each CWT being in its own byte
    string.
]]></artwork></figure>

<t>cwt-t:  This header parameter identifies the end entity CWT
    by a hash value (a thumbprint).  The 'cwt-t' header
    parameter is represented as an array of two elements.  The first
    element is an algorithm identifier that is an integer or a string
    containing the hash algorithm identifier corresponding to the
    Value column (integer or text string) of the algorithm registered
    in the "COSE Algorithms" registry (see <xref target="COSE-IANA"/>).  The second
    element is a binary string containing the hash value computed over the CWT.</t>

<figure><artwork><![CDATA[
As this header parameter does not provide any trust, the header
parameter can be in either a protected or unprotected header
bucket.

The identification of the end entity CWT MUST be integrity
protected by COSE.  This can be done by sending the header
parameter in the protected header or including the end entity
CWT in the external_aad.

The 'cwt-t' header parameter can be used alone or together with the
'cwt-bag', 'cwt-chain', or 'cwt-u' header parameters to provide
integrity protection of the end entity CWT.

For interoperability, applications that use this header parameter
MUST support the hash algorithm 'SHA-256' but can use other hash
algorithms.  This requirement allows for different implementations
to be configured to use an interoperable algorithm, but does not
preclude the use (by prior agreement) of other algorithms.

Note: For conveying the thumbprint of a public key alone, see
{{I-D.ietf-cose-key-thumbprint}}.
]]></artwork></figure>

<t>cwt-u:  This header parameter provides the ability to identify a CWT
    by a URI <xref target="RFC3986"/>.  It contains a CBOR text string.
    The referenced resource can be any of the following media types:</t>

<figure><artwork><![CDATA[
*  application/cwt {{RFC8392}}

*  application/cwt usage=chain (see {{chain}})

When the application/cwt media type is used, the data is a
encoded according to RFC 8392.  If the parameter "usage" is
set to "chain", this sequence indicates a CWT chain.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the 'cwt-u' in the
unprotected or protected header combined with an 'cwt-t' in the
protected header, or including the end entity CWT in the
external_aad.  As the end entity CWT is integrity
protected by COSE, the URI does not need to provide any
protection.

If a retrieved CWT does not chain to an existing trust
anchor, that CWT MUST NOT be trusted unless the URI
provides integrity protection and server authentication and the
server is configured as trusted to provide new trust anchors or if
an out-of-band confirmation can be received for trusting the
retrieved CWT.  If an HTTP or Constrained Application
Protocol (CoAP) GET request is used to retrieve a CWT, a
standardized security protocol should be used. Examples of such
security protocols include TLS
{{RFC8446}}, DTLS {{RFC9147}}, or Object Security for Constrained
RESTful Environments (OSCORE) {{RFC8613}} should be used.
]]></artwork></figure>

<t>The header parameters are used in the following locations:</t>

<t>COSE_Signature and COSE_Sign1 objects:  In these objects, the
    parameters identify the CWT to be used for validating the
    signature.</t>

<t>COSE_recipient objects:  In this location, the parameters identify
    the CWT for the recipient of the message.</t>

<t>The labels assigned to each header parameter can be found in
<xref target="fig-parameters"/>.</t>

<figure title="CWT COSE Header Parameters." anchor="fig-parameters"><artwork><![CDATA[
+===========+=======+===============+==========================+
| Name      | Label | Value Type    | Description              |
+===========+=======+===============+==========================+
| cwt-bag   | TBD1  | COSE_CWT      | An unordered bag of CWTs |
+-----------+-------+---------------+--------------------------+
| cwt-chain | TBD2  | COSE_CWT      | An ordered chain of CWTs |
+-----------+-------+---------------+--------------------------+
| cwt-t     | TBD3  | COSE_CWTHash  | Hash of a CWT            |
+-----------+-------+---------------+--------------------------+
| cwt-u     | TBD4  | uri           | URI pointing to a CWT    |
+-----------+-------+---------------+--------------------------+
]]></artwork></figure>

<t>Below is an equivalent Concise Data Definition Language (CDDL)
description (see <xref target="RFC8610"/>) of the text above.</t>

<figure><artwork><![CDATA[
COSE_CWT = CWT-Messages / [ 2*CWT-Messages ]
COSE_CWTHash = [ hashAlg: (int / tstr), hashValue: bstr ]
]]></artwork></figure>

<t>The contents of "bstr" are the bytes of a CWT.</t>

</section>
<section anchor="cwts-and-static-static-ecdh"><name>CWTs and Static-Static ECDH</name>

<t>The header parameters defined in the previous section are used to
identify the recipient CWT. In this section, we define
the algorithm-specific parameters that are used for identifying or
transporting the sender's key for static-static key agreement
algorithms.</t>

<t>These attributes are defined analogously to those in the previous
section.  There is no definition for the CWT bag, as the same
parameter would be used for both the sender and recipient.</t>

<t>cwt-chain-sender:
    This header parameter contains the chain of CWT starting
    with the sender's key exchange CWT.  The structure is the
    same as 'cwt-chain'.</t>

<t>cwt-t-sender:
    This header parameter contains the hash value for the sender's key
    exchange CWT.  The structure is the same as 'cwt-t'.</t>

<t>cwt-u-sender:
    This header parameter contains a URI for the sender's key exchange
    CWT.  The structure and processing are the same as 'cwt-u'.</t>

<figure title="Static ECDH Algorithm Values." anchor="fig-static-ecdh"><artwork><![CDATA[
+==============+=====+=============+===================+===========+
|Name          |Label|Type         | Algorithm         |Description|
+==============+=====+=============+===================+===========+
|cwt-t-sender  |TBD5 |COSE_CWTHash | ECDH-SS+HKDF-256, |Thumbprint |
|              |     |             | ECDH-SS+HKDF-512, |for the    |
|              |     |             | ECDH-SS+A128KW,   |sender's   |
|              |     |             | ECDH-SS+A192KW,   |CWT        |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
|cwt-u-sender  |TBD6 |uri          | ECDH-SS+HKDF-256, |URI for the|
|              |     |             | ECDH-SS+HKDF-512, |sender's   |
|              |     |             | ECDH-SS+A128KW,   |CWT        |
|              |     |             | ECDH-SS+A192KW,   |           |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
|cwt-chain-    |TBD7 |COSE_CWT     | ECDH-SS+HKDF-256, |static key |
|  sender      |     |             | ECDH-SS+HKDF-512, |CWT chain  |
|              |     |             | ECDH-SS+A128KW,   |           |
|              |     |             | ECDH-SS+A192KW,   |           |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
]]></artwork></figure>

</section>
<section anchor="example"><name>Example</name>

<t>TBD</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Establishing trust in a CWT is a vital part of processing.  A
major component of establishing trust is determining what the set of
trust anchors are for the process.  A new self-signed CWT
appearing on the client cannot be a trigger to modify the set of
trust anchors, because a well-defined trust-establishment process is
required.  One common way for a new trust anchor to be added to (or
removed from) a device is by doing a new firmware upgrade.</t>

<t>In constrained systems, there is a trade-off between the order of
checking the signature and checking the CWT for validity.
Validating CWTs may require that network resources be
accessed in order to get statys information or retrieve
CWTs during path building.  The resulting network access can
consume power and network bandwidth.  On the other hand, if the
CWT are validated after the signature is validated, an
oracle can potentially be built based on detecting the network
resources, which is only done if the signature validation passes.  In
any event, both the signature validation and the CWT
validation MUST be completed successfully before acting on any
requests.</t>

<t>The end entity CWT MUST be integrity protected
by COSE.  Without proof of possession, an attacker can trick the CA
into issuing an identity-misbinding CWT with someone else's
"borrowed" public key but with a different subject.  An on-path
attacker can then perform an identity-misbinding attack by replacing
the real end entity CWT in COSE with such an identity-
misbinding CWT.</t>

<t>end entity CWTs contain identities that a passive on-path attacker
eavesdropping on the conversation can use to identify and track the
subject.  The 'cwt-t' and 'cwt-u' header parameters are just
alternative permanent identifiers and can also be used to track
the subject. To provide identity protection, COSE can be sent inside
another security protocol providing confidentiality. Additionally,
the encryption capabilities of COSE itself can be used to protect
the CWT content.</t>

<t>When processing the 'cwt-u' header parameter, the security
considerations of <xref target="RFC3986"/>, and specifically those defined in
Section 7.1 of <xref target="RFC3986"/>, also apply.</t>

<t>Protecting the integrity of the 'cwt-bag', 'cwt-chain', and 'cwt-t'
contents by placing them in the protected header bucket can help
mitigate some risks of a misbehaving CA (cf. Section 5.1 of
<xref target="RFC2634"/>).</t>

<t>The security of the algorithm used for 'cwt-t' does not affect the
security of the system, as this header parameter selects which
CWT that is already present on the system should be used, but
it does not provide any trust.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<section anchor="cose-header-parameters-registry"><name>COSE Header Parameters Registry</name>

<t>IANA has registered the new COSE Header parameters in <xref target="fig-parameters"/> in the
"COSE Header Parameters" registry.  The "Value Registry" field is
empty for all of the items.  For each item, the "Reference" field
points to this document.</t>

</section>
<section anchor="cose-header-algorithm-parameters-registry"><name>COSE Header Algorithm Parameters Registry</name>

<t>IANA has registered the new COSE Header Algorithm parameters in
<xref target="fig-static-ecdh"/> in the "COSE Header Algorithm Parameters" registry.
For each item, the "Reference" field points to this document.</t>

</section>
<section anchor="media-type-applicationcwt"><name>Media Type application/cwt</name>

<t>When the application/cwt media type is used, the data is a CBOR
sequence of single-entry COSE_CWT structures (encoding "bstr").  If
the parameter "usage" is set to "chain", this sequence indicates a
CWT chain.</t>

<t>The application/cwt media type is already registered by <xref target="RFC8392"/> and
this document updates the IANA entry of this media type <xref target="RFC6838"/>:</t>

<t><list style="symbols">
  <t>Type name:  application</t>
  <t>Subtype name:  cwt</t>
  <t>Required parameters:  N/A</t>
  <t>Optional parameters:  usage  <list style="symbols">
      <t>Can be absent to provide no further information about the
 intended meaning of the order in the CBOR sequence of
 CWT.</t>
      <t>Can be set to "chain" to indicate that the sequence of data
 items is to be interpreted as a CWT chain.</t>
    </list></t>
  <t>Encoding considerations:  binary</t>
  <t>Security considerations:  See the Security Considerations section of
  RFC 8392 and [TBD: This RFC].</t>
  <t>Interoperability considerations:  N/A</t>
  <t>Published specification:  RFC 8392 and [TBD: This RFC]</t>
  <t>Applications that use this media type:  Applications that employ COSE
  and use CWTs, including IoT applications and digital credentials
  in general.</t>
  <t>Fragment identifier considerations:  N/A</t>
  <t>Additional information:  <list style="symbols">
      <t>Deprecated alias names for this type:  N/A</t>
      <t>Magic number(s):  N/A</t>
      <t>File extension(s):  N/A</t>
      <t>Macintosh file type code(s):  N/A</t>
    </list></t>
  <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
  <t>Intended usage:  COMMON</t>
  <t>Restrictions on usage:  N/A</t>
  <t>Author:  COSE WG</t>
  <t>Change controller:  IESG</t>
</list></t>

<t>Provisional registration?  No</t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC2634">
  <front>
    <title>Enhanced Security Services for S/MIME</title>
    <author fullname="P. Hoffman" initials="P." role="editor" surname="Hoffman"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes four optional security service extensions for S/MIME. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2634"/>
  <seriesInfo name="DOI" value="10.17487/RFC2634"/>
</reference>

<reference anchor="RFC3986">
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
    <author fullname="R. Fielding" initials="R." surname="Fielding"/>
    <author fullname="L. Masinter" initials="L." surname="Masinter"/>
    <date month="January" year="2005"/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="66"/>
  <seriesInfo name="RFC" value="3986"/>
  <seriesInfo name="DOI" value="10.17487/RFC3986"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6838">
  <front>
    <title>Media Type Specifications and Registration Procedures</title>
    <author fullname="N. Freed" initials="N." surname="Freed"/>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="T. Hansen" initials="T." surname="Hansen"/>
    <date month="January" year="2013"/>
    <abstract>
      <t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols. This memo documents an Internet Best Current Practice.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="13"/>
  <seriesInfo name="RFC" value="6838"/>
  <seriesInfo name="DOI" value="10.17487/RFC6838"/>
</reference>

<reference anchor="RFC8392">
  <front>
    <title>CBOR Web Token (CWT)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
    <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8392"/>
  <seriesInfo name="DOI" value="10.17487/RFC8392"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8747">
  <front>
    <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="L. Seitz" initials="L." surname="Seitz"/>
    <author fullname="G. Selander" initials="G." surname="Selander"/>
    <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="March" year="2020"/>
    <abstract>
      <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8747"/>
  <seriesInfo name="DOI" value="10.17487/RFC8747"/>
</reference>

<reference anchor="RFC8949">
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="94"/>
  <seriesInfo name="RFC" value="8949"/>
  <seriesInfo name="DOI" value="10.17487/RFC8949"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC6024">
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname="R. Reddy" initials="R." surname="Reddy"/>
    <author fullname="C. Wallace" initials="C." surname="Wallace"/>
    <date month="October" year="2010"/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6024"/>
  <seriesInfo name="DOI" value="10.17487/RFC6024"/>
</reference>

<reference anchor="RFC8446">
  <front>
    <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <date month="August" year="2018"/>
    <abstract>
      <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8446"/>
  <seriesInfo name="DOI" value="10.17487/RFC8446"/>
</reference>

<reference anchor="RFC8613">
  <front>
    <title>Object Security for Constrained RESTful Environments (OSCORE)</title>
    <author fullname="G. Selander" initials="G." surname="Selander"/>
    <author fullname="J. Mattsson" initials="J." surname="Mattsson"/>
    <author fullname="F. Palombini" initials="F." surname="Palombini"/>
    <author fullname="L. Seitz" initials="L." surname="Seitz"/>
    <date month="July" year="2019"/>
    <abstract>
      <t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE). OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t>
      <t>Although an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration. Therefore, this document updates RFC 7252.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8613"/>
  <seriesInfo name="DOI" value="10.17487/RFC8613"/>
</reference>

<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-cose-key-thumbprint">
   <front>
      <title>CBOR Object Signing and Encryption (COSE) Key Thumbprint</title>
      <author fullname="Kohei Isobe" initials="K." surname="Isobe">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Orie Steele" initials="O." surname="Steele">
         <organization>Transmute</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification defines a method for computing a hash value over a
   COSE Key. It defines which fields in a COSE Key structure are used in
   the hash computation, the method of creating a canonical form of the
   fields, and how to hash the byte sequence.  The resulting hash value
   can be used for identifying or selecting a key that is the subject of
   the thumbprint.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cose-key-thumbprint-04"/>
   
</reference>


<reference anchor="I-D.ietf-oauth-status-list">
   <front>
      <title>Token Status List</title>
      <author fullname="Tobias Looker" initials="T." surname="Looker">
         <organization>MATTR</organization>
      </author>
      <author fullname="Paul Bastian" initials="P." surname="Bastian">
         </author>
      <author fullname="Christian Bormann" initials="C." surname="Bormann">
         </author>
      <date day="3" month="March" year="2024"/>
      <abstract>
	 <t>   This specification defines status list data structures and processing
   rules for representing the status of tokens secured by JSON Object
   Signing and Encryption (JOSE) or CBOR Object Signing and
   Encryption(COSE), such as JSON Web Tokens (JWTs), CBOR Web Tokens
   (CWTs) and ISO mdoc.  The status list token data structures
   themselves are also represented as JWTs or CWTs.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-status-list-02"/>
   
</reference>


<reference anchor="I-D.mcmillion-keytrans-architecture">
   <front>
      <title>Key Transparency Architecture</title>
      <author fullname="Brendan McMillion" initials="B." surname="McMillion">
         </author>
      <date day="4" month="December" year="2023"/>
      <abstract>
	 <t>   This document defines the terminology and interaction patterns
   involved in the deployment of Key Transparency (KT) in a general
   secure group messaging infrastructure, and specifies the security
   properties that the protocol provides.  It also gives more general,
   non-prescriptive guidance on how to securely apply KT to a number of
   common applications.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-mcmillion-keytrans-architecture-01"/>
   
</reference>


<reference anchor="COSE-IANA" target="https://www.iana.org/assignments/cose/">
  <front>
    <title>CBOR Object Signing and Encryption (COSE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="December"/>
  </front>
</reference>


    </references>


<?line 552?>

<section anchor="contributor"><name>Contributor</name>

<t>We would like to thank Ken Takayama for his work on the IETF SUIT trust
domains draft, which created the idea for writing this specification. Ken
provided valuable review feedback.</t>

</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>Add your name here.</t>

</section>


  </back>

<!-- ##markdown-source:
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
WwAA

-->

</rfc>

