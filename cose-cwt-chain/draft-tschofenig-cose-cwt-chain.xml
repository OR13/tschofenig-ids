<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-tschofenig-cose-cwt-chain-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="CWT Chains">CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing Chains of CBOR Web Tokens (CWTs)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="December" day="16"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 65?>

<t>The CBOR Object Signing and Encryption (COSE) message structure uses
references to keys and defines header parameters to carry chains of X.509
certificates.</t>

<t>This specification extends this functionality to CBOR Web Tokens (CWTs).</t>



    </abstract>



  </front>

  <middle>


<?line 73?>

<section anchor="introduction"><name>Introduction</name>

<t>The CBOR Object Signing and Encryption (COSE) message structure uses
references to keys and defines header parameters to carry chains of X.509
certificates. The header parameters for conveying X.509 certificate chains
in a COSE payload are defined in <xref target="RFC9360"/>.</t>

<t>This document is inspired by RFC 9360 and defines header parameters to
convey chains of CBOR Web Tokens (CWTs) <xref target="RFC8392"/>. The use of chains of
CWTs allows a trust infrastructure established by CWTs to be used with COSE.
The Concise Binary Object Representation (CBOR) key structures <xref target="RFC8949"/>
that have been defined in COSE support the use of X.509 certificates. This
specification applies the well-proven concepts to CWTs. These chains of CWTs
allow path validation similarly to what a X.509 certificate-based Public Key
Infrastructure (PKI) provides. Since <xref target="RFC8747"/> does not define the
semantics of path validation for CWTs, new terminology is introduced.</t>

<t>This document is structured as follows: After introducing some terms, we
describe path validation for CWTs. Then, we define new header parameters.</t>

</section>
<section anchor="terminology-and-requirements-language"><name>Terminology and Requirements Language</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t>The following terms are useful for readers of this document:</t>

<t><list style="symbols">
  <t>End Entity: user of CWT and/or end user system that is the subject of a CWT;</t>
  <t>CA: certification authority; RFC 8747 calls this entity the "issuer" and
describes it as "the party that creates the CWT and binds the claims about
the subject to the proof-of-possession key". In an OAuth-based system,
this entity often corresponds to an authorization server.</t>
  <t>CA CWT: A CWT that is self-issued whereby the same name appears in the
subject and issuer claims.</t>
  <t>RA: registration authority, i.e., an optional system to which
a CA delegates certain management functions; while often used in PKI
deployments it is a role that has not found usage in systems using CWTs.</t>
  <t>CRL issuer: a system that generates and signs Certificate Revocation
Lists (CRLs); The term CRL is used generically to also refer to status
lists <xref target="I-D.ietf-oauth-status-list"/>.</t>
  <t>repository: a system or collection of distributed systems that stores
CWTs and CRLs and serves as a means of distributing these CWTs and CRLs
to end entities. These repositories may be append-only databases, in the
style of <xref target="I-D.mcmillion-keytrans-architecture"/>.</t>
  <t>Trust Anchor:  As defined in <xref target="RFC6024"/> and <xref target="RFC9019"/>, a Trust Anchor
"represents an authoritative entity via a public key and associated data.
The public key is used to verify digital signatures, and the associated
data is used to constrain the types of information for which the trust
anchor is authoritative." The trust anchor may be a CWT, a raw public key,
or other structure, as appropriate.</t>
  <t>Subject Public Key (Info): The "confirmation" claim, defined in <xref target="RFC8747"/>,
used to carry the public key and the algorithm with which the key is used.</t>
</list></t>

</section>
<section anchor="cwt-path-validation"><name>CWT Path Validation</name>

<t>The goal of path validation is to verify the binding between a subject
name and the public key, as represented in the target CWT, based
on the public key of the trust anchor. In most cases, the target
CWT will be an end entity CWT. Verifying the binding between the name and
subject public key requires obtaining a sequence of certificates that
support that binding. For path validation to work CWTs that have a
minimum number of claims, namely:</t>

<t><list style="symbols">
  <t>Subject</t>
  <t>Issuer</t>
  <t>Confirmation</t>
</list></t>

<t>Valid paths begin with CWTs issued by a trust anchor and the trust anchor
is an input to the algorithm. The algorithm in Section 6 of <xref target="RFC5280"/>
requires the public key of the CA, the CA's name, and any constraints upon
the set of paths that may be validated using this key.</t>

<t>The path validation algorithm verifies that a prospective certification
path (a sequence of n CWTs) satisfies the following conditions:</t>

<t>(a)  for all x in {1, ..., n-1}, the subject of CWT x is the issuer of CWT x+1;</t>

<t>(b)  CWT 1 is issued by the trust anchor;</t>

<t>(c)  CWT n is the CWT to be validated (i.e., the target CWT); and</t>

<t>Note:  When the trust anchor is provided in the form of a self-signed CWT,
this self-signed CWT is not included as part of the prospective certification path.</t>

<t>As a variation to the algorithm presented in Section 6 of <xref target="RFC5280"/>, there
is no strict requirement for a CWT being valid in terms of its lifetime (as
indicated by the "Expiration Time" and the "Not Before" claims) since CWTs
may not necessarily carry these claims and validatity may be determined via
different means, which are outside the scope of this algorithm.</t>

<t>Path validation is an important part of establishing trust in a CWT and
when applying path validation, as defined in Section 6 of<xref target="RFC5280"/>, to
CWTs the reader needs to treat them as certificates. It is important to keep
in mind that many of the advanced features available with an X.509 certificate-based
PKI are, at the time of writing, not available with CWTs. The authors do,
however, believe that differences will decrease over time as CWT-based deployments
scale.</t>

</section>
<section anchor="cwt-cose-header-parameters"><name>CWT COSE Header Parameters</name>

<t>Parties that intend to rely on the assertions made by a CWTs
obtained from any of these methods still need to validate it.  This
validation can be done according to the PKIX rules specified in
<xref target="RFC5280"/> or by using a different trust structure, such as a trusted
distributor for self-signed CWTs.  The PKIX
validation includes matching against the trust anchors configured for
the application.  These rules apply when the validation succeeds in a
single step as well as when CWT chains need to be built.  If
the application cannot establish trust in the CWT, the public
key contained in the CWT cannot be used for cryptographic
operations.</t>

<t>The header parameters defined in this document are as follows:</t>

<t>cwt-bag:  This header parameter contains a bag of CWTs, which is unordered and
    may contain self-signed CWTs.  Note that there could be
    duplicate CWTs.  The CWT bag can contain
    CWT that are completely extraneous to the message.  (An
    example of this would be where a signed message is being used to
    transport a CWT containing a key agreement key.)  As the
    CWT are unordered, the party evaluating the signature
    will need to be capable of building the CWT path as
    necessary.  That party will also have to take into account that
    the bag may not contain the full set of CWT needed to
    build any particular chain.</t>

<figure><artwork><![CDATA[
The trust mechanism MUST process any CWT in this
parameter as untrusted input.  The presence of a self-signed
CWT in the parameter MUST NOT cause the update of the set
of trust anchors without some out-of-band confirmation.  As the
contents of this header parameter are untrusted input, the header
parameter can be in either the protected or unprotected header
bucket.  Sending the header parameter in the unprotected header
bucket allows an intermediary to remove or add CWT.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the header parameter in
the protected header, sending an 'cwt-bag' in the unprotected header
combined with an 'cwt-t' in the protected header, or including the
end entity CWT in the external_aad.

This header parameter allows for a single CWT or a
bag of CWT to be carried in the message.

*  If a single CWT is conveyed, it is placed in a CBOR
    byte string.

*  If multiple CWTs are conveyed, a CBOR array of byte
    strings is used, with each CWT being in its own byte
    string.
]]></artwork></figure>

<t>cwt-chain:  This header parameter contains an ordered array of CWTs.
    The CWTs are to be ordered starting with
    the CWT containing the end entity key followed by the
    CWT that signed it, and so on.  There is no requirement
    for the entire chain to be present in the element if there is
    reason to believe that the relying party already has, or can
    locate, the missing CWT.  This means that the relying
    party is still required to do path building but that a candidate
    path is proposed in this header parameter.</t>

<figure><artwork><![CDATA[
The trust mechanism MUST process any CWT in this
parameter as untrusted input.  The presence of a self-signed
CWT in the parameter MUST NOT cause the update of the set
of trust anchors without some out-of-band confirmation.  As the
contents of this header parameter are untrusted input, the header
parameter can be in either the protected or unprotected header
bucket.  Sending the header parameter in the unprotected header
bucket allows an intermediary to remove or add CWT.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the header parameter in
the protected header, sending an 'cwt-chain' in the unprotected
header combined with an 'cwt-t' in the protected header, or
including the end entity CWT in the external_aad.

This header parameter allows for a single CWT or a
chain of CWTs to be carried in the message.

*  If a single CWT is conveyed, it is placed in a CBOR
    byte string.

*  If multiple CWTs are conveyed, a CBOR array of byte
    strings is used, with each CWT being in its own byte
    string.
]]></artwork></figure>

<t>cwt-t:  This header parameter identifies the end entity CWT
    by a hash value (a thumbprint).  The 'cwt-t' header
    parameter is represented as an array of two elements.  The first
    element is an algorithm identifier that is an integer or a string
    containing the hash algorithm identifier corresponding to the
    Value column (integer or text string) of the algorithm registered
    in the "COSE Algorithms" registry (see <xref target="COSE-IANA"/>).  The second
    element is a binary string containing the hash value computed over the CWT.</t>

<figure><artwork><![CDATA[
As this header parameter does not provide any trust, the header
parameter can be in either a protected or unprotected header
bucket.

The identification of the end entity CWT MUST be integrity
protected by COSE.  This can be done by sending the header
parameter in the protected header or including the end entity
CWT in the external_aad.

The 'cwt-t' header parameter can be used alone or together with the
'cwt-bag', 'cwt-chain', or 'cwt-u' header parameters to provide
integrity protection of the end entity CWT.

For interoperability, applications that use this header parameter
MUST support the hash algorithm 'SHA-256' but can use other hash
algorithms.  This requirement allows for different implementations
to be configured to use an interoperable algorithm, but does not
preclude the use (by prior agreement) of other algorithms.

Note: For conveying the thumbprint of a public key alone, see
{{I-D.ietf-cose-key-thumbprint}}.
]]></artwork></figure>

<t>cwt-u:  This header parameter provides the ability to identify a CWT
    by a URI <xref target="RFC3986"/>.  It contains a CBOR text string.
    The referenced resource can be any of the following media types:</t>

<figure><artwork><![CDATA[
*  application/cwt {{RFC8392}}

*  application/cwt usage=chain (see {{chain}})

When the application/cwt media type is used, the data is a
encoded according to RFC 8392.  If the parameter "usage" is
set to "chain", this sequence indicates a CWT chain.

The end entity CWT MUST be integrity protected by COSE.
This can, for example, be done by sending the 'cwt-u' in the
unprotected or protected header combined with an 'cwt-t' in the
protected header, or including the end entity CWT in the
external_aad.  As the end entity CWT is integrity
protected by COSE, the URI does not need to provide any
protection.

If a retrieved CWT does not chain to an existing trust
anchor, that CWT MUST NOT be trusted unless the URI
provides integrity protection and server authentication and the
server is configured as trusted to provide new trust anchors or if
an out-of-band confirmation can be received for trusting the
retrieved CWT.  If an HTTP or Constrained Application
Protocol (CoAP) GET request is used to retrieve a CWT, a
standardized security protocol should be used. Examples of such
security protocols include TLS
{{RFC8446}}, DTLS {{RFC9147}}, or Object Security for Constrained
RESTful Environments (OSCORE) {{RFC8613}} should be used.
]]></artwork></figure>

<t>The header parameters are used in the following locations:</t>

<t>COSE_Signature and COSE_Sign1 objects:  In these objects, the
    parameters identify the CWT to be used for validating the
    signature.</t>

<t>COSE_recipient objects:  In this location, the parameters identify
    the CWT for the recipient of the message.</t>

<t>The labels assigned to each header parameter can be found in
<xref target="fig-parameters"/>.</t>

<figure title="CWT COSE Header Parameters." anchor="fig-parameters"><artwork><![CDATA[
+===========+=======+===============+==========================+
| Name      | Label | Value Type    | Description              |
+===========+=======+===============+==========================+
| cwt-bag   | TBD1  | COSE_CWT      | An unordered bag of CWTs |
+-----------+-------+---------------+--------------------------+
| cwt-chain | TBD2  | COSE_CWT      | An ordered chain of CWTs |
+-----------+-------+---------------+--------------------------+
| cwt-t     | TBD3  | COSE_CWTHash  | Hash of a CWT            |
+-----------+-------+---------------+--------------------------+
| cwt-u     | TBD4  | uri           | URI pointing to a CWT    |
+-----------+-------+---------------+--------------------------+
]]></artwork></figure>

<t>Below is an equivalent Concise Data Definition Language (CDDL)
description (see <xref target="RFC8610"/>) of the text above.</t>

<figure><artwork><![CDATA[
COSE_CWT = CWT-Messages / [ 2*CWT-Messages ]
COSE_CWTHash = [ hashAlg: (int / tstr), hashValue: bstr ]
]]></artwork></figure>

<t>The contents of "bstr" are the bytes of a CWT.</t>

</section>
<section anchor="cwts-and-static-static-ecdh"><name>CWTs and Static-Static ECDH</name>

<t>The header parameters defined in the previous section are used to
identify the recipient CWT. In this section, we define
the algorithm-specific parameters that are used for identifying or
transporting the sender's key for static-static key agreement
algorithms.</t>

<t>These attributes are defined analogously to those in the previous
section.  There is no definition for the CWT bag, as the same
parameter would be used for both the sender and recipient.</t>

<t>cwt-chain-sender:
    This header parameter contains the chain of CWT starting
    with the sender's key exchange CWT.  The structure is the
    same as 'cwt-chain'.</t>

<t>cwt-t-sender:
    This header parameter contains the hash value for the sender's key
    exchange CWT.  The structure is the same as 'cwt-t'.</t>

<t>cwt-u-sender:
    This header parameter contains a URI for the sender's key exchange
    CWT.  The structure and processing are the same as 'cwt-u'.</t>

<figure title="Static ECDH Algorithm Values." anchor="fig-static-ecdh"><artwork><![CDATA[
+==============+=====+=============+===================+===========+
|Name          |Label|Type         | Algorithm         |Description|
+==============+=====+=============+===================+===========+
|cwt-t-sender  |TBD5 |COSE_CWTHash | ECDH-SS+HKDF-256, |Thumbprint |
|              |     |             | ECDH-SS+HKDF-512, |for the    |
|              |     |             | ECDH-SS+A128KW,   |sender's   |
|              |     |             | ECDH-SS+A192KW,   |CWT        |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
|cwt-u-sender  |TBD6 |uri          | ECDH-SS+HKDF-256, |URI for the|
|              |     |             | ECDH-SS+HKDF-512, |sender's   |
|              |     |             | ECDH-SS+A128KW,   |CWT        |
|              |     |             | ECDH-SS+A192KW,   |           |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
|cwt-chain-    |TBD7 |COSE_CWT     | ECDH-SS+HKDF-256, |static key |
|  sender      |     |             | ECDH-SS+HKDF-512, |CWT chain  |
|              |     |             | ECDH-SS+A128KW,   |           |
|              |     |             | ECDH-SS+A192KW,   |           |
|              |     |             | ECDH-SS+A256KW    |           |
+--------------+-----+-------------+-------------------+-----------+
]]></artwork></figure>

</section>
<section anchor="example"><name>Example</name>

<t>TBD</t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>Establishing trust in a CWT is a vital part of processing.  A
major component of establishing trust is determining what the set of
trust anchors are for the process.  A new self-signed CWT
appearing on the client cannot be a trigger to modify the set of
trust anchors, because a well-defined trust-establishment process is
required.  One common way for a new trust anchor to be added to (or
removed from) a device is by doing a new firmware upgrade.</t>

<t>In constrained systems, there is a trade-off between the order of
checking the signature and checking the CWT for validity.
Validating CWTs may require that network resources be
accessed in order to get statys information or retrieve
CWTs during path building.  The resulting network access can
consume power and network bandwidth.  On the other hand, if the
CWT are validated after the signature is validated, an
oracle can potentially be built based on detecting the network
resources, which is only done if the signature validation passes.  In
any event, both the signature validation and the CWT
validation MUST be completed successfully before acting on any
requests.</t>

<t>The end entity CWT MUST be integrity protected
by COSE.  Without proof of possession, an attacker can trick the CA
into issuing an identity-misbinding CWT with someone else's
"borrowed" public key but with a different subject.  An on-path
attacker can then perform an identity-misbinding attack by replacing
the real end entity CWT in COSE with such an identity-
misbinding CWT.</t>

<t>end entity CWTs contain identities that a passive on-path attacker
eavesdropping on the conversation can use to identify and track the
subject.  The 'cwt-t' and 'cwt-u' header parameters are just
alternative permanent identifiers and can also be used to track
the subject. To provide identity protection, COSE can be sent inside
another security protocol providing confidentiality. Additionally,
the encryption capabilities of COSE itself can be used to protect
the CWT content.</t>

<t>When processing the 'cwt-u' header parameter, the security
considerations of <xref target="RFC3986"/>, and specifically those defined in
Section 7.1 of <xref target="RFC3986"/>, also apply.</t>

<t>Protecting the integrity of the 'cwt-bag', 'cwt-chain', and 'cwt-t'
contents by placing them in the protected header bucket can help
mitigate some risks of a misbehaving CA (cf. Section 5.1 of
<xref target="RFC2634"/>).</t>

<t>The security of the algorithm used for 'cwt-t' does not affect the
security of the system, as this header parameter selects which
CWT that is already present on the system should be used, but
it does not provide any trust.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<section anchor="cose-header-parameters-registry"><name>COSE Header Parameters Registry</name>

<t>IANA has registered the new COSE Header parameters in <xref target="fig-parameters"/> in the
"COSE Header Parameters" registry.  The "Value Registry" field is
empty for all of the items.  For each item, the "Reference" field
points to this document.</t>

</section>
<section anchor="cose-header-algorithm-parameters-registry"><name>COSE Header Algorithm Parameters Registry</name>

<t>IANA has registered the new COSE Header Algorithm parameters in
<xref target="fig-static-ecdh"/> in the "COSE Header Algorithm Parameters" registry.
For each item, the "Reference" field points to this document.</t>

</section>
<section anchor="media-type-applicationcwt"><name>Media Type application/cwt</name>

<t>When the application/cwt media type is used, the data is a CBOR
sequence of single-entry COSE_CWT structures (encoding "bstr").  If
the parameter "usage" is set to "chain", this sequence indicates a
CWT chain.</t>

<t>The application/cwt media type is already registered by <xref target="RFC8392"/> and
this document updates the IANA entry of this media type <xref target="RFC6838"/>:</t>

<t><list style="symbols">
  <t>Type name:  application</t>
  <t>Subtype name:  cwt</t>
  <t>Required parameters:  N/A</t>
  <t>Optional parameters:  usage  <list style="symbols">
      <t>Can be absent to provide no further information about the
 intended meaning of the order in the CBOR sequence of
 CWT.</t>
      <t>Can be set to "chain" to indicate that the sequence of data
 items is to be interpreted as a CWT chain.</t>
    </list></t>
  <t>Encoding considerations:  binary</t>
  <t>Security considerations:  See the Security Considerations section of
  RFC 8392 and [TBD: This RFC].</t>
  <t>Interoperability considerations:  N/A</t>
  <t>Published specification:  RFC 8392 and [TBD: This RFC]</t>
  <t>Applications that use this media type:  Applications that employ COSE
  and use CWTs, including IoT applications and digital credentials
  in general.</t>
  <t>Fragment identifier considerations:  N/A</t>
  <t>Additional information:  <list style="symbols">
      <t>Deprecated alias names for this type:  N/A</t>
      <t>Magic number(s):  N/A</t>
      <t>File extension(s):  N/A</t>
      <t>Macintosh file type code(s):  N/A</t>
    </list></t>
  <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
  <t>Intended usage:  COMMON</t>
  <t>Restrictions on usage:  N/A</t>
  <t>Author:  COSE WG</t>
  <t>Change controller:  IESG</t>
</list></t>

<t>Provisional registration?  No
~~~</t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC2634">
  <front>
    <title>Enhanced Security Services for S/MIME</title>
    <author fullname="P. Hoffman" initials="P." role="editor" surname="Hoffman"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes four optional security service extensions for S/MIME. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2634"/>
  <seriesInfo name="DOI" value="10.17487/RFC2634"/>
</reference>

<reference anchor="RFC3986">
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
    <author fullname="R. Fielding" initials="R." surname="Fielding"/>
    <author fullname="L. Masinter" initials="L." surname="Masinter"/>
    <date month="January" year="2005"/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="66"/>
  <seriesInfo name="RFC" value="3986"/>
  <seriesInfo name="DOI" value="10.17487/RFC3986"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6838">
  <front>
    <title>Media Type Specifications and Registration Procedures</title>
    <author fullname="N. Freed" initials="N." surname="Freed"/>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="T. Hansen" initials="T." surname="Hansen"/>
    <date month="January" year="2013"/>
    <abstract>
      <t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols. This memo documents an Internet Best Current Practice.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="13"/>
  <seriesInfo name="RFC" value="6838"/>
  <seriesInfo name="DOI" value="10.17487/RFC6838"/>
</reference>

<reference anchor="RFC8392">
  <front>
    <title>CBOR Web Token (CWT)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
    <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8392"/>
  <seriesInfo name="DOI" value="10.17487/RFC8392"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8747">
  <front>
    <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="L. Seitz" initials="L." surname="Seitz"/>
    <author fullname="G. Selander" initials="G." surname="Selander"/>
    <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <date month="March" year="2020"/>
    <abstract>
      <t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8747"/>
  <seriesInfo name="DOI" value="10.17487/RFC8747"/>
</reference>

<reference anchor="RFC8949">
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="94"/>
  <seriesInfo name="RFC" value="8949"/>
  <seriesInfo name="DOI" value="10.17487/RFC8949"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC6024">
  <front>
    <title>Trust Anchor Management Requirements</title>
    <author fullname="R. Reddy" initials="R." surname="Reddy"/>
    <author fullname="C. Wallace" initials="C." surname="Wallace"/>
    <date month="October" year="2010"/>
    <abstract>
      <t>A trust anchor represents an authoritative entity via a public key and associated data. The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative. A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor. This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6024"/>
  <seriesInfo name="DOI" value="10.17487/RFC6024"/>
</reference>

<reference anchor="RFC8446">
  <front>
    <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <date month="August" year="2018"/>
    <abstract>
      <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8446"/>
  <seriesInfo name="DOI" value="10.17487/RFC8446"/>
</reference>

<reference anchor="RFC8613">
  <front>
    <title>Object Security for Constrained RESTful Environments (OSCORE)</title>
    <author fullname="G. Selander" initials="G." surname="Selander"/>
    <author fullname="J. Mattsson" initials="J." surname="Mattsson"/>
    <author fullname="F. Palombini" initials="F." surname="Palombini"/>
    <author fullname="L. Seitz" initials="L." surname="Seitz"/>
    <date month="July" year="2019"/>
    <abstract>
      <t>This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE). OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t>
      <t>Although an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration. Therefore, this document updates RFC 7252.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8613"/>
  <seriesInfo name="DOI" value="10.17487/RFC8613"/>
</reference>

<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9147">
  <front>
    <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
    <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
    <date month="April" year="2022"/>
    <abstract>
      <t>This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
      <t>The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
      <t>This document obsoletes RFC 6347.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9147"/>
  <seriesInfo name="DOI" value="10.17487/RFC9147"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-cose-key-thumbprint">
   <front>
      <title>CBOR Object Signing and Encryption (COSE) Key Thumbprint</title>
      <author fullname="Kohei Isobe" initials="K." surname="Isobe">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Orie Steele" initials="O." surname="Steele">
         <organization>Transmute</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification defines a method for computing a hash value over a
   COSE Key. It defines which fields in a COSE Key structure are used in
   the hash computation, the method of creating a canonical form of the
   fields, and how to hash the byte sequence.  The resulting hash value
   can be used for identifying or selecting a key that is the subject of
   the thumbprint.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cose-key-thumbprint-04"/>
   
</reference>


<reference anchor="I-D.ietf-oauth-status-list">
   <front>
      <title>OAuth Status List</title>
      <author fullname="Tobias Looker" initials="T." surname="Looker">
         <organization>MATTR</organization>
      </author>
      <author fullname="Paul Bastian" initials="P." surname="Bastian">
         </author>
      <author fullname="Christian Bormann" initials="C." surname="Bormann">
         </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification defines status list data structures for
   representing the status of JSON Web Tokens (JWTs) [RFC7519] and CBOR
   Web Tokens (CWTs) [RFC8392].  The status list data structures
   themselves are also represented as JWTs or CWTs.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-status-list-00"/>
   
</reference>


<reference anchor="I-D.mcmillion-keytrans-architecture">
   <front>
      <title>Key Transparency Architecture</title>
      <author fullname="Brendan McMillion" initials="B." surname="McMillion">
         </author>
      <date day="4" month="December" year="2023"/>
      <abstract>
	 <t>   This document defines the terminology and interaction patterns
   involved in the deployment of Key Transparency (KT) in a general
   secure group messaging infrastructure, and specifies the security
   properties that the protocol provides.  It also gives more general,
   non-prescriptive guidance on how to securely apply KT to a number of
   common applications.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-mcmillion-keytrans-architecture-01"/>
   
</reference>


<reference anchor="COSE-IANA" target="https://www.iana.org/assignments/cose/">
  <front>
    <title>CBOR Object Signing and Encryption (COSE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="December"/>
  </front>
</reference>


    </references>


<?line 552?>

<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank Brendan Moran for his work on the IETF SUIT trust
domains draft, which created the idea for writing this specification.</t>

</section>


  </back>

<!-- ##markdown-source:
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
R7cpKg5RMpHNX6Q7owApNPdO6GNVNGXivBhE5Yi2AMlOmfRXjCILHPHfA9pc
3Pv6ibe4HekH8SNUFfMXUsN+VKgKbo5tAWktN97zjSHWh+9JwTW/OGHP/XEE
HGeYN1z5HgPVC8EVMms0pMeA9fpGK4xasvXVt8rnI7cSa/8k59TrHN80hBli
rV+U28r0M77mpk6/K0+y29f0Wd9IB/sgZmtA9VlDIrQFnwcD6ZOxkaHsDEbY
5AnBTmfpiPkpOpaicJgnRNxoBHlPfkEoIqqO40CtL1o1kBDB3tj58gyhOkPM
qUAGOESMd2r50FpWcsUN6PCNnFKu9ezHr6Sd4gy5dX7hCAHcXdyJLUGpqd/F
ncGll3fSni691VIIT9RJhHXQJ5JD415cX7/FOqe+w4J+P2lFVYa+pW0X5M6Z
g9Pi5O2h+d35NRsKV9VxD5dfIbRYKQpwRMuS8P4NmRs95cWo5Dmrua8kcA+T
ORdJ4eAYdTSPx41xla+MmetXV15164EdFHvP6LG2xR1xoxV26c9R+Mmm3Z3L
NO/Or67RF3ye36ZlIQdWzMHl1enlu3N/KuDx0aOPHzdBv7vIpN3GUQuE18eZ
9lyKNoao/PnKVy6kG9E/OjIFQ1+NcFBEC6H6qB/Je7tqsDc+NxadO8DOfcUv
5pJQNhkGeIiv0mUK278BAJHeg9/vauF27W5yzifLoimnW4EmUJjZscvQtKkp
OXRjIqK7y+WT9lip15KUDVpI1GL//e9/39+7/0P77/7G383nO/7d39/7YN6g
c4z/fTCvACX9lXjnGraMn59xS7Yczun8+/DbwKCuK691/ezsCH+ZVMCxwnaS
R9XGqBrJMAzaf/c3/m4+3/EvwCCql2E4vgMGD0E32fAbwlDrWgTDoxiGF/CH
6Tv/9c33m7T4jWBoWhi+wV9SLvFCbPeWBZkR9V8CLL8JDMzaP4/MV13Gl5N+
P/TubtEY9ti5e+ZwIEeyAvD+SS1AMv1JpDM4ZGeoknPjWjgsQsbg7OzVoT+A
oEfRxAvUY5fkB4bWTnivdkzBdCuOgV1+4FaT16IDKvPA/NEcf9159Kf2bSbo
D/QKwpiTbDbiDAMNqkmNH/b5MQvkyOBkIYbyaqJY4tRrD7/3pLyAAu26Fqtj
Q8D2VdsVfoWAJxnIH3N+evbiF/YUcEb6NkV1vfK+gzcHKPJ2tHSrGNlIezWr
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
xJJDnPf/26Z4EB9bAAA=

-->

</rfc>

