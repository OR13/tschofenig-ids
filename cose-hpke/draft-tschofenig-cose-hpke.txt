



SUIT                                                       H. Tschofenig
Internet-Draft                                               Arm Limited
Intended status: Standards Track                              R. Housley
Expires: March 31, 2022                                   Vigil Security
                                                                B. Moran
                                                             Arm Limited
                                                      September 27, 2021


Use of Hybrid public-key encryption (HPKE) with CBOR Object Signing and
                           Encryption (COSE)
                     draft-tschofenig-cose-hpke-00

Abstract

   This specification defines hybrid public-key encryption (HPKE) for
   use with CBOR Object Signing and Encryption (COSE).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 31, 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Tschofenig, et al.       Expires March 31, 2022                 [Page 1]

Internet-Draft                  COSE HPKE                 September 2021


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Conventions and Terminology . . . . . . . . . . . . . . . . .   2
   3.  HPKE for COSE . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Example . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   9
     7.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . .  10
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Introduction

   Hybrid public-key encryption (HPKE) [I-D.irtf-cfrg-hpke] is a scheme
   that provides public key encryption of arbitrary-sized plaintexts
   given a recipient's public key.  HPKE utilizes a non-interactive
   ephemeral-static Diffie-Hellman exchange to establish a shared
   secret, which is then used to encrypt plaintext.

   The HPKE specification defines several features for use with public
   key encryption and a subset of those features is applied to COSE
   [RFC8152].

2.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.



Tschofenig, et al.       Expires March 31, 2022                 [Page 2]

Internet-Draft                  COSE HPKE                 September 2021


   This specification uses the following abbreviations:

   -  Key-encryption key / key-encrypting key (KEK), a term defined in
      RFC 4949 [RFC4949].

   -  Content-encryption key (CEK), a term defined in RFC 2630
      [RFC2630].

   -  Hybrid Public Key Encryption (HPKE) is defined in
      [I-D.irtf-cfrg-hpke].

3.  HPKE for COSE

   HPKE, when used with COSE, follows a three layer structure:

   -  Layer 0 contains content encrypted with the CEK.  The content may
      be detached.  If not detached, then it is included.

   -  Layer 1 includes the encrypted content encryption key.

   -  Layer 2 contains parameters needed for HPKE to generate the layer
      1 key and to encrypt it.

   The CDDL for the COSE_Encrypt structure, as used with HPKE, is shown
   in Figure 1.

   Noteworthy are the following aspects: - COSE_Encrypt represents layer
   0 with the ciphertext.  COSE_recipient_outer represents layer 1 and
   COSE_recipient_inner represents layer 2.






















Tschofenig, et al.       Expires March 31, 2022                 [Page 3]

Internet-Draft                  COSE HPKE                 September 2021


 COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)

 SUIT_Encryption_Info = COSE_Encrypt_Tagged

 COSE_Encrypt = [
   Headers,
   ciphertext : bstr / nil,
   recipients : [+COSE_recipient_outer]
 ]

 COSE_recipient_outer = [
   protected   : bstr .size 0,
   unprotected : header_map, ; must contain alg
   ciphertext  : bstr        ; CEK encrypted based on HPKE algo
   recipients  : [ + COSE_recipient_inner ]
 ]

 COSE_recipient_inner = [
   protected   : bstr .cbor header_map, ; must contain HPKE alg
   unprotected : header_map, ; must contain kid and ephemeral public key
   ciphertext  : null;
   recipients  : null
 ]

 header_map = {
   Generic_Headers,
   * label =values,
 }

           Figure 1: CDDL for HPKE-based COSE_Encrypt Structure

   The COSE_Encrypt structure in Figure 1 requires the encrypted CEK and
   the ephemeral public key of the sender to be generated.  This is
   accomplished with the HPKE encryption functions as shown in Figure 2.

       CEK = random()
       pkR = DeserializePublicKey(recipient_public_key)
       info = "cose hpke" || 0x00 || COSE_KDF_Context
       enc, context = SetupBaseS(pkR, info)
       ciphertext = context.Seal(null, CEK)

                                 Figure 2

   Legend:

   -  The functions DeserializePublicKey(), SetupBaseS() and Seal() are
      defined in HPKE [I-D.irtf-cfrg-hpke].




Tschofenig, et al.       Expires March 31, 2022                 [Page 4]

Internet-Draft                  COSE HPKE                 September 2021


   -  CEK is a random byte sequence of keysize length whereby keysize
      corresponds to the size of the indicated symmetric encryption
      algorithm.  For example, AES-128-GCM requires a 16 byte key.  The
      CEK would therefore be 16 bytes long.

   -  'recipient_public_key' represents the public key of the recipient.

   -  'info' is a data structure described below used as input to the
      key derivation internal to the HPKE algorithm.  In addition to the
      constant prefix, the COSE_KDF_Context structure is used.  The
      'COSE_KDF_Context' structure is detailed in Figure 3.

   The result of the above-described operation is the encrypted CEK
   (denoted as ciphertext in Figure 2) and the HPKE encapsulated key
   (i.e., the ephemeral ECDH public key of the sender in variable
   'enc').

   This specification re-uses the context information structure defined
   in [RFC8152], which is repeated here for easier readability.

      PartyInfo = (
          identity : bstr / nil,
          nonce : bstr / int / nil,
          other : bstr / nil
      )

      COSE_KDF_Context = [
          AlgorithmID : int / tstr,
          PartyUInfo : [ PartyInfo ],
          PartyVInfo : [ PartyInfo ],
          SuppPubInfo : [
              keyDataLength : uint,
              protected : empty_or_serialized_map,
              ? other : bstr
          ],
          ? SuppPrivInfo : bstr
      ]

                 Figure 3: COSE_KDF_Context Data Structure

   Since this specification may be used in a number of different
   deployment environments some flexibility is provided regarding how
   the fields in the COSE_KDF_Context data structure.

   For better interopability, the following recommended settings are
   provided:





Tschofenig, et al.       Expires March 31, 2022                 [Page 5]

Internet-Draft                  COSE HPKE                 September 2021


   -  PartyUInfo.identity corresponds to the kid found in the
      COSE_Sign_Tagged or COSE_Sign1_Tagged structure (when a digital
      signature is used).  When utilizing a MAC, then the kid is found
      in the COSE_Mac_Tagged or COSE_Mac0_Tagged structure.

   -  PartyVInfo.identity corresponds to the kid used for the respective
      recipient from the inner-most recipients array.

   -  The value in the AlgorithmID field corresponds to the alg
      parameter in the protected structure in the inner-most recipients
      array.

   -  keyDataLength is set to the number of bits of the desired output
      value.

   -  protected refers to the protected structure of the inner-most
      array.

   The recipient decrypts the encrypted CEK using two input parameters:

   -  the private key skR corresponding to the public key pkR used by
      the sender.

   -  the HPKE encapsulated key (i.e., ephemeral ECDH public key)
      created by the sender.

   If the HPKE operation is successful, the recipient obtains the CEK
   and can decrypt the plaintext.

   Figure 4 shows the HPKE computations performed by the recipient for
   decryption.

       info = "cose hpke" || 0x00 || COSE_KDF_Context
       context = SetupBaseR(ciphertext, skR, info)
       CEK = context.Open(null, ciphertext)

                                 Figure 4

4.  Example

   An example of the COSE_Encrypt structure using the HPKE scheme is
   shown in Figure 5.  It uses the following algorithm combination:

   -  AES-GCM-128 for encryption of detached ciphertext.

   -  AES-GCM-128 for encryption of the CEK.

   -  Key Encapsulation Mechanism (KEM): NIST P-256



Tschofenig, et al.       Expires March 31, 2022                 [Page 6]

Internet-Draft                  COSE HPKE                 September 2021


   -  Key Derivation Function (KDF): HKDF-SHA256

   96(
       [
           // protected field with alg=AES-GCM-128
           h'A10101',
           {    // unprotected field with iv
                5: h'26682306D4FB28CA01B43B80'
           },
           // null because of detached ciphertext
           null,
           [  // COSE_recipient_outer
               h'',          // empty protected field
               {             // unprotected field with ...
                    1: 1     //     alg=A128GCM
               },
               // Encrypted CEK
               h'FA55A50CF110908DA6443149F2C2062011A7D8333A72721A',
               / recipients / [  // COSE_recipient_inner
                [
                  / protected / h'a1013818' / {
                      \ alg \ 1:TBD1 \ HPKE/P-256+HKDF-256 \
                    } / ,
                  / unprotected / {
                    // HPKE encapsulated key
                    / ephemeral / -1:{
                      / kty / 1:2,
                      / crv / -1:1,
                      / x / -2:h'98f50a4ff6c05861c8...90bbf91d6280',
                      / y / -3:true
                    },
                    // kid for recipient static ECDH public key
                    / kid / 4:'meriadoc.brandybuck@buckland.example'
                  },
                  // empty ciphertext
                  / ciphertext / h''
                ]
               ]
           ]
        ]
   )

                  Figure 5: COSE_Encrypt Example for HPKE








Tschofenig, et al.       Expires March 31, 2022                 [Page 7]

Internet-Draft                  COSE HPKE                 September 2021


5.  Security Considerations

   HPKE assumes that the sender is in possession of the public key of
   the recipient.  Since the CEK is randomly generated it must be
   ensured that the guidelines for random number generations are
   followed, see [RFC8937].

6.  IANA Considerations

   This document requests IANA to create new entries in the COSE
   Algorithms registry established with [RFC8152].

 +-------------+-------+---------+------------+--------+---------------+
 | Name        | Value | KDF     | Ephemeral- | Key    | Description   |
 |             |       |         | Static     | Wrap   |               |
 +-------------+-------+---------+------------+--------+---------------+
 | HPKE/P-256+ | TBD1  | HKDF -  | yes        | none   | HPKE with     |
 | HKDF-256    |       | SHA-256 |            |        | ECDH-ES       |
 |             |       |         |            |        | (P-256) +     |
 |             |       |         |            |        | HKDF-256      |
 +-------------+-------+---------+------------+--------+---------------+
 | HPKE/P-384+ | TBD2  | HKDF -  | yes        | none   | HPKE with     |
 | HKDF-SHA384 |       | SHA-384 |            |        | ECDH-ES       |
 |             |       |         |            |        | (P-384) +     |
 |             |       |         |            |        | HKDF-384      |
 +-------------+-------+---------+------------+--------+---------------+
 | HPKE/P-521+ | TBD3  | HKDF -  | yes        | none   | HPKE with     |
 | HKDF-SHA521 |       | SHA-521 |            |        | ECDH-ES       |
 |             |       |         |            |        | (P-521) +     |
 |             |       |         |            |        | HKDF-521      |
 +-------------+-------+---------+------------+--------+---------------+
 | HPKE        | TBD4  | HKDF -  | yes        | none   | HPKE with     |
 | X25519 +    |       | SHA-256 |            |        | ECDH-ES       |
 | HKDF-SHA256 |       |         |            |        | (X25519) +    |
 |             |       |         |            |        | HKDF-256      |
 +-------------+-------+---------+------------+--------+---------------+
 | HPKE        | TBD4  | HKDF -  | yes        | none   | HPKE with     |
 | X448 +      |       | SHA-512 |            |        | ECDH-ES       |
 | HKDF-SHA512 |       |         |            |        | (X448) +      |
 |             |       |         |            |        | HKDF-512      |
 +-------------+-------+---------+------------+--------+---------------+

7.  References








Tschofenig, et al.       Expires March 31, 2022                 [Page 8]

Internet-Draft                  COSE HPKE                 September 2021


7.1.  Normative References

   [I-D.irtf-cfrg-hpke]
              Cisco, Inria, Inria, and Cloudflare, "Hybrid Public Key
              Encryption", draft-irtf-cfrg-hpke-12 (work in progress),
              September 2021.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8152]  Schaad, J., "CBOR Object Signing and Encryption (COSE)",
              RFC 8152, DOI 10.17487/RFC8152, July 2017,
              <https://www.rfc-editor.org/info/rfc8152>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

7.2.  Informative References

   [RFC2630]  Housley, R., "Cryptographic Message Syntax", RFC 2630,
              DOI 10.17487/RFC2630, June 1999,
              <https://www.rfc-editor.org/info/rfc2630>.

   [RFC4949]  Shirey, R., "Internet Security Glossary, Version 2",
              FYI 36, RFC 4949, DOI 10.17487/RFC4949, August 2007,
              <https://www.rfc-editor.org/info/rfc4949>.

   [RFC8937]  Cremers, C., Garratt, L., Smyshlyaev, S., Sullivan, N.,
              and C. Wood, "Randomness Improvements for Security
              Protocols", RFC 8937, DOI 10.17487/RFC8937, October 2020,
              <https://www.rfc-editor.org/info/rfc8937>.

















Tschofenig, et al.       Expires March 31, 2022                 [Page 9]

Internet-Draft                  COSE HPKE                 September 2021


Appendix A.  Acknowledgements

   TBD: Add your name here.

Authors' Addresses

   Hannes Tschofenig
   Arm Limited

   EMail: hannes.tschofenig@arm.com


   Russ Housley
   Vigil Security, LLC

   EMail: housley@vigilsec.com


   Brendan Moran
   Arm Limited

   EMail: Brendan.Moran@arm.com





























Tschofenig, et al.       Expires March 31, 2022                [Page 10]
